
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003128  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080032b0  080032b0  000132b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032c0  080032c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080032c0  080032c0  000132c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032c8  080032c8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032c8  080032c8  000132c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032cc  080032cc  000132cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080032d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000160  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000016c  2000016c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000972c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015ca  00000000  00000000  00029768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000988  00000000  00000000  0002ad38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008e0  00000000  00000000  0002b6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fabb  00000000  00000000  0002bfa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009e0a  00000000  00000000  0004ba5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c477b  00000000  00000000  00055865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00119fe0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002950  00000000  00000000  0011a030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003298 	.word	0x08003298

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003298 	.word	0x08003298

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__gedf2>:
 8000794:	f04f 3cff 	mov.w	ip, #4294967295
 8000798:	e006      	b.n	80007a8 <__cmpdf2+0x4>
 800079a:	bf00      	nop

0800079c <__ledf2>:
 800079c:	f04f 0c01 	mov.w	ip, #1
 80007a0:	e002      	b.n	80007a8 <__cmpdf2+0x4>
 80007a2:	bf00      	nop

080007a4 <__cmpdf2>:
 80007a4:	f04f 0c01 	mov.w	ip, #1
 80007a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007be:	d01b      	beq.n	80007f8 <__cmpdf2+0x54>
 80007c0:	b001      	add	sp, #4
 80007c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007c6:	bf0c      	ite	eq
 80007c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007cc:	ea91 0f03 	teqne	r1, r3
 80007d0:	bf02      	ittt	eq
 80007d2:	ea90 0f02 	teqeq	r0, r2
 80007d6:	2000      	moveq	r0, #0
 80007d8:	4770      	bxeq	lr
 80007da:	f110 0f00 	cmn.w	r0, #0
 80007de:	ea91 0f03 	teq	r1, r3
 80007e2:	bf58      	it	pl
 80007e4:	4299      	cmppl	r1, r3
 80007e6:	bf08      	it	eq
 80007e8:	4290      	cmpeq	r0, r2
 80007ea:	bf2c      	ite	cs
 80007ec:	17d8      	asrcs	r0, r3, #31
 80007ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80007f2:	f040 0001 	orr.w	r0, r0, #1
 80007f6:	4770      	bx	lr
 80007f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000800:	d102      	bne.n	8000808 <__cmpdf2+0x64>
 8000802:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000806:	d107      	bne.n	8000818 <__cmpdf2+0x74>
 8000808:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d1d6      	bne.n	80007c0 <__cmpdf2+0x1c>
 8000812:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000816:	d0d3      	beq.n	80007c0 <__cmpdf2+0x1c>
 8000818:	f85d 0b04 	ldr.w	r0, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop

08000820 <__aeabi_cdrcmple>:
 8000820:	4684      	mov	ip, r0
 8000822:	4610      	mov	r0, r2
 8000824:	4662      	mov	r2, ip
 8000826:	468c      	mov	ip, r1
 8000828:	4619      	mov	r1, r3
 800082a:	4663      	mov	r3, ip
 800082c:	e000      	b.n	8000830 <__aeabi_cdcmpeq>
 800082e:	bf00      	nop

08000830 <__aeabi_cdcmpeq>:
 8000830:	b501      	push	{r0, lr}
 8000832:	f7ff ffb7 	bl	80007a4 <__cmpdf2>
 8000836:	2800      	cmp	r0, #0
 8000838:	bf48      	it	mi
 800083a:	f110 0f00 	cmnmi.w	r0, #0
 800083e:	bd01      	pop	{r0, pc}

08000840 <__aeabi_dcmpeq>:
 8000840:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000844:	f7ff fff4 	bl	8000830 <__aeabi_cdcmpeq>
 8000848:	bf0c      	ite	eq
 800084a:	2001      	moveq	r0, #1
 800084c:	2000      	movne	r0, #0
 800084e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000852:	bf00      	nop

08000854 <__aeabi_dcmplt>:
 8000854:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000858:	f7ff ffea 	bl	8000830 <__aeabi_cdcmpeq>
 800085c:	bf34      	ite	cc
 800085e:	2001      	movcc	r0, #1
 8000860:	2000      	movcs	r0, #0
 8000862:	f85d fb08 	ldr.w	pc, [sp], #8
 8000866:	bf00      	nop

08000868 <__aeabi_dcmple>:
 8000868:	f84d ed08 	str.w	lr, [sp, #-8]!
 800086c:	f7ff ffe0 	bl	8000830 <__aeabi_cdcmpeq>
 8000870:	bf94      	ite	ls
 8000872:	2001      	movls	r0, #1
 8000874:	2000      	movhi	r0, #0
 8000876:	f85d fb08 	ldr.w	pc, [sp], #8
 800087a:	bf00      	nop

0800087c <__aeabi_dcmpge>:
 800087c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000880:	f7ff ffce 	bl	8000820 <__aeabi_cdrcmple>
 8000884:	bf94      	ite	ls
 8000886:	2001      	movls	r0, #1
 8000888:	2000      	movhi	r0, #0
 800088a:	f85d fb08 	ldr.w	pc, [sp], #8
 800088e:	bf00      	nop

08000890 <__aeabi_dcmpgt>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff ffc4 	bl	8000820 <__aeabi_cdrcmple>
 8000898:	bf34      	ite	cc
 800089a:	2001      	movcc	r0, #1
 800089c:	2000      	movcs	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_uldivmod>:
 80008a4:	b953      	cbnz	r3, 80008bc <__aeabi_uldivmod+0x18>
 80008a6:	b94a      	cbnz	r2, 80008bc <__aeabi_uldivmod+0x18>
 80008a8:	2900      	cmp	r1, #0
 80008aa:	bf08      	it	eq
 80008ac:	2800      	cmpeq	r0, #0
 80008ae:	bf1c      	itt	ne
 80008b0:	f04f 31ff 	movne.w	r1, #4294967295
 80008b4:	f04f 30ff 	movne.w	r0, #4294967295
 80008b8:	f000 b974 	b.w	8000ba4 <__aeabi_idiv0>
 80008bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80008c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008c4:	f000 f806 	bl	80008d4 <__udivmoddi4>
 80008c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008d0:	b004      	add	sp, #16
 80008d2:	4770      	bx	lr

080008d4 <__udivmoddi4>:
 80008d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d8:	9d08      	ldr	r5, [sp, #32]
 80008da:	4604      	mov	r4, r0
 80008dc:	468e      	mov	lr, r1
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d14d      	bne.n	800097e <__udivmoddi4+0xaa>
 80008e2:	428a      	cmp	r2, r1
 80008e4:	4694      	mov	ip, r2
 80008e6:	d969      	bls.n	80009bc <__udivmoddi4+0xe8>
 80008e8:	fab2 f282 	clz	r2, r2
 80008ec:	b152      	cbz	r2, 8000904 <__udivmoddi4+0x30>
 80008ee:	fa01 f302 	lsl.w	r3, r1, r2
 80008f2:	f1c2 0120 	rsb	r1, r2, #32
 80008f6:	fa20 f101 	lsr.w	r1, r0, r1
 80008fa:	fa0c fc02 	lsl.w	ip, ip, r2
 80008fe:	ea41 0e03 	orr.w	lr, r1, r3
 8000902:	4094      	lsls	r4, r2
 8000904:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000908:	0c21      	lsrs	r1, r4, #16
 800090a:	fbbe f6f8 	udiv	r6, lr, r8
 800090e:	fa1f f78c 	uxth.w	r7, ip
 8000912:	fb08 e316 	mls	r3, r8, r6, lr
 8000916:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800091a:	fb06 f107 	mul.w	r1, r6, r7
 800091e:	4299      	cmp	r1, r3
 8000920:	d90a      	bls.n	8000938 <__udivmoddi4+0x64>
 8000922:	eb1c 0303 	adds.w	r3, ip, r3
 8000926:	f106 30ff 	add.w	r0, r6, #4294967295
 800092a:	f080 811f 	bcs.w	8000b6c <__udivmoddi4+0x298>
 800092e:	4299      	cmp	r1, r3
 8000930:	f240 811c 	bls.w	8000b6c <__udivmoddi4+0x298>
 8000934:	3e02      	subs	r6, #2
 8000936:	4463      	add	r3, ip
 8000938:	1a5b      	subs	r3, r3, r1
 800093a:	b2a4      	uxth	r4, r4
 800093c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000940:	fb08 3310 	mls	r3, r8, r0, r3
 8000944:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000948:	fb00 f707 	mul.w	r7, r0, r7
 800094c:	42a7      	cmp	r7, r4
 800094e:	d90a      	bls.n	8000966 <__udivmoddi4+0x92>
 8000950:	eb1c 0404 	adds.w	r4, ip, r4
 8000954:	f100 33ff 	add.w	r3, r0, #4294967295
 8000958:	f080 810a 	bcs.w	8000b70 <__udivmoddi4+0x29c>
 800095c:	42a7      	cmp	r7, r4
 800095e:	f240 8107 	bls.w	8000b70 <__udivmoddi4+0x29c>
 8000962:	4464      	add	r4, ip
 8000964:	3802      	subs	r0, #2
 8000966:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800096a:	1be4      	subs	r4, r4, r7
 800096c:	2600      	movs	r6, #0
 800096e:	b11d      	cbz	r5, 8000978 <__udivmoddi4+0xa4>
 8000970:	40d4      	lsrs	r4, r2
 8000972:	2300      	movs	r3, #0
 8000974:	e9c5 4300 	strd	r4, r3, [r5]
 8000978:	4631      	mov	r1, r6
 800097a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800097e:	428b      	cmp	r3, r1
 8000980:	d909      	bls.n	8000996 <__udivmoddi4+0xc2>
 8000982:	2d00      	cmp	r5, #0
 8000984:	f000 80ef 	beq.w	8000b66 <__udivmoddi4+0x292>
 8000988:	2600      	movs	r6, #0
 800098a:	e9c5 0100 	strd	r0, r1, [r5]
 800098e:	4630      	mov	r0, r6
 8000990:	4631      	mov	r1, r6
 8000992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000996:	fab3 f683 	clz	r6, r3
 800099a:	2e00      	cmp	r6, #0
 800099c:	d14a      	bne.n	8000a34 <__udivmoddi4+0x160>
 800099e:	428b      	cmp	r3, r1
 80009a0:	d302      	bcc.n	80009a8 <__udivmoddi4+0xd4>
 80009a2:	4282      	cmp	r2, r0
 80009a4:	f200 80f9 	bhi.w	8000b9a <__udivmoddi4+0x2c6>
 80009a8:	1a84      	subs	r4, r0, r2
 80009aa:	eb61 0303 	sbc.w	r3, r1, r3
 80009ae:	2001      	movs	r0, #1
 80009b0:	469e      	mov	lr, r3
 80009b2:	2d00      	cmp	r5, #0
 80009b4:	d0e0      	beq.n	8000978 <__udivmoddi4+0xa4>
 80009b6:	e9c5 4e00 	strd	r4, lr, [r5]
 80009ba:	e7dd      	b.n	8000978 <__udivmoddi4+0xa4>
 80009bc:	b902      	cbnz	r2, 80009c0 <__udivmoddi4+0xec>
 80009be:	deff      	udf	#255	; 0xff
 80009c0:	fab2 f282 	clz	r2, r2
 80009c4:	2a00      	cmp	r2, #0
 80009c6:	f040 8092 	bne.w	8000aee <__udivmoddi4+0x21a>
 80009ca:	eba1 010c 	sub.w	r1, r1, ip
 80009ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d2:	fa1f fe8c 	uxth.w	lr, ip
 80009d6:	2601      	movs	r6, #1
 80009d8:	0c20      	lsrs	r0, r4, #16
 80009da:	fbb1 f3f7 	udiv	r3, r1, r7
 80009de:	fb07 1113 	mls	r1, r7, r3, r1
 80009e2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009e6:	fb0e f003 	mul.w	r0, lr, r3
 80009ea:	4288      	cmp	r0, r1
 80009ec:	d908      	bls.n	8000a00 <__udivmoddi4+0x12c>
 80009ee:	eb1c 0101 	adds.w	r1, ip, r1
 80009f2:	f103 38ff 	add.w	r8, r3, #4294967295
 80009f6:	d202      	bcs.n	80009fe <__udivmoddi4+0x12a>
 80009f8:	4288      	cmp	r0, r1
 80009fa:	f200 80cb 	bhi.w	8000b94 <__udivmoddi4+0x2c0>
 80009fe:	4643      	mov	r3, r8
 8000a00:	1a09      	subs	r1, r1, r0
 8000a02:	b2a4      	uxth	r4, r4
 8000a04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a08:	fb07 1110 	mls	r1, r7, r0, r1
 8000a0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a10:	fb0e fe00 	mul.w	lr, lr, r0
 8000a14:	45a6      	cmp	lr, r4
 8000a16:	d908      	bls.n	8000a2a <__udivmoddi4+0x156>
 8000a18:	eb1c 0404 	adds.w	r4, ip, r4
 8000a1c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a20:	d202      	bcs.n	8000a28 <__udivmoddi4+0x154>
 8000a22:	45a6      	cmp	lr, r4
 8000a24:	f200 80bb 	bhi.w	8000b9e <__udivmoddi4+0x2ca>
 8000a28:	4608      	mov	r0, r1
 8000a2a:	eba4 040e 	sub.w	r4, r4, lr
 8000a2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a32:	e79c      	b.n	800096e <__udivmoddi4+0x9a>
 8000a34:	f1c6 0720 	rsb	r7, r6, #32
 8000a38:	40b3      	lsls	r3, r6
 8000a3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a42:	fa20 f407 	lsr.w	r4, r0, r7
 8000a46:	fa01 f306 	lsl.w	r3, r1, r6
 8000a4a:	431c      	orrs	r4, r3
 8000a4c:	40f9      	lsrs	r1, r7
 8000a4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a52:	fa00 f306 	lsl.w	r3, r0, r6
 8000a56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a5a:	0c20      	lsrs	r0, r4, #16
 8000a5c:	fa1f fe8c 	uxth.w	lr, ip
 8000a60:	fb09 1118 	mls	r1, r9, r8, r1
 8000a64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a68:	fb08 f00e 	mul.w	r0, r8, lr
 8000a6c:	4288      	cmp	r0, r1
 8000a6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a72:	d90b      	bls.n	8000a8c <__udivmoddi4+0x1b8>
 8000a74:	eb1c 0101 	adds.w	r1, ip, r1
 8000a78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a7c:	f080 8088 	bcs.w	8000b90 <__udivmoddi4+0x2bc>
 8000a80:	4288      	cmp	r0, r1
 8000a82:	f240 8085 	bls.w	8000b90 <__udivmoddi4+0x2bc>
 8000a86:	f1a8 0802 	sub.w	r8, r8, #2
 8000a8a:	4461      	add	r1, ip
 8000a8c:	1a09      	subs	r1, r1, r0
 8000a8e:	b2a4      	uxth	r4, r4
 8000a90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a94:	fb09 1110 	mls	r1, r9, r0, r1
 8000a98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000aa0:	458e      	cmp	lr, r1
 8000aa2:	d908      	bls.n	8000ab6 <__udivmoddi4+0x1e2>
 8000aa4:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000aac:	d26c      	bcs.n	8000b88 <__udivmoddi4+0x2b4>
 8000aae:	458e      	cmp	lr, r1
 8000ab0:	d96a      	bls.n	8000b88 <__udivmoddi4+0x2b4>
 8000ab2:	3802      	subs	r0, #2
 8000ab4:	4461      	add	r1, ip
 8000ab6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000aba:	fba0 9402 	umull	r9, r4, r0, r2
 8000abe:	eba1 010e 	sub.w	r1, r1, lr
 8000ac2:	42a1      	cmp	r1, r4
 8000ac4:	46c8      	mov	r8, r9
 8000ac6:	46a6      	mov	lr, r4
 8000ac8:	d356      	bcc.n	8000b78 <__udivmoddi4+0x2a4>
 8000aca:	d053      	beq.n	8000b74 <__udivmoddi4+0x2a0>
 8000acc:	b15d      	cbz	r5, 8000ae6 <__udivmoddi4+0x212>
 8000ace:	ebb3 0208 	subs.w	r2, r3, r8
 8000ad2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ad6:	fa01 f707 	lsl.w	r7, r1, r7
 8000ada:	fa22 f306 	lsr.w	r3, r2, r6
 8000ade:	40f1      	lsrs	r1, r6
 8000ae0:	431f      	orrs	r7, r3
 8000ae2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ae6:	2600      	movs	r6, #0
 8000ae8:	4631      	mov	r1, r6
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	f1c2 0320 	rsb	r3, r2, #32
 8000af2:	40d8      	lsrs	r0, r3
 8000af4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af8:	fa21 f303 	lsr.w	r3, r1, r3
 8000afc:	4091      	lsls	r1, r2
 8000afe:	4301      	orrs	r1, r0
 8000b00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b04:	fa1f fe8c 	uxth.w	lr, ip
 8000b08:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b0c:	fb07 3610 	mls	r6, r7, r0, r3
 8000b10:	0c0b      	lsrs	r3, r1, #16
 8000b12:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b16:	fb00 f60e 	mul.w	r6, r0, lr
 8000b1a:	429e      	cmp	r6, r3
 8000b1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000b20:	d908      	bls.n	8000b34 <__udivmoddi4+0x260>
 8000b22:	eb1c 0303 	adds.w	r3, ip, r3
 8000b26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b2a:	d22f      	bcs.n	8000b8c <__udivmoddi4+0x2b8>
 8000b2c:	429e      	cmp	r6, r3
 8000b2e:	d92d      	bls.n	8000b8c <__udivmoddi4+0x2b8>
 8000b30:	3802      	subs	r0, #2
 8000b32:	4463      	add	r3, ip
 8000b34:	1b9b      	subs	r3, r3, r6
 8000b36:	b289      	uxth	r1, r1
 8000b38:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b3c:	fb07 3316 	mls	r3, r7, r6, r3
 8000b40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b44:	fb06 f30e 	mul.w	r3, r6, lr
 8000b48:	428b      	cmp	r3, r1
 8000b4a:	d908      	bls.n	8000b5e <__udivmoddi4+0x28a>
 8000b4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b50:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b54:	d216      	bcs.n	8000b84 <__udivmoddi4+0x2b0>
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d914      	bls.n	8000b84 <__udivmoddi4+0x2b0>
 8000b5a:	3e02      	subs	r6, #2
 8000b5c:	4461      	add	r1, ip
 8000b5e:	1ac9      	subs	r1, r1, r3
 8000b60:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b64:	e738      	b.n	80009d8 <__udivmoddi4+0x104>
 8000b66:	462e      	mov	r6, r5
 8000b68:	4628      	mov	r0, r5
 8000b6a:	e705      	b.n	8000978 <__udivmoddi4+0xa4>
 8000b6c:	4606      	mov	r6, r0
 8000b6e:	e6e3      	b.n	8000938 <__udivmoddi4+0x64>
 8000b70:	4618      	mov	r0, r3
 8000b72:	e6f8      	b.n	8000966 <__udivmoddi4+0x92>
 8000b74:	454b      	cmp	r3, r9
 8000b76:	d2a9      	bcs.n	8000acc <__udivmoddi4+0x1f8>
 8000b78:	ebb9 0802 	subs.w	r8, r9, r2
 8000b7c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b80:	3801      	subs	r0, #1
 8000b82:	e7a3      	b.n	8000acc <__udivmoddi4+0x1f8>
 8000b84:	4646      	mov	r6, r8
 8000b86:	e7ea      	b.n	8000b5e <__udivmoddi4+0x28a>
 8000b88:	4620      	mov	r0, r4
 8000b8a:	e794      	b.n	8000ab6 <__udivmoddi4+0x1e2>
 8000b8c:	4640      	mov	r0, r8
 8000b8e:	e7d1      	b.n	8000b34 <__udivmoddi4+0x260>
 8000b90:	46d0      	mov	r8, sl
 8000b92:	e77b      	b.n	8000a8c <__udivmoddi4+0x1b8>
 8000b94:	3b02      	subs	r3, #2
 8000b96:	4461      	add	r1, ip
 8000b98:	e732      	b.n	8000a00 <__udivmoddi4+0x12c>
 8000b9a:	4630      	mov	r0, r6
 8000b9c:	e709      	b.n	80009b2 <__udivmoddi4+0xde>
 8000b9e:	4464      	add	r4, ip
 8000ba0:	3802      	subs	r0, #2
 8000ba2:	e742      	b.n	8000a2a <__udivmoddi4+0x156>

08000ba4 <__aeabi_idiv0>:
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b5b0      	push	{r4, r5, r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bac:	f000 fc2c 	bl	8001408 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb0:	f000 f8ee 	bl	8000d90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb4:	f000 fa34 	bl	8001020 <MX_GPIO_Init>
  MX_TIM6_Init();
 8000bb8:	f000 f954 	bl	8000e64 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000bbc:	f000 f988 	bl	8000ed0 <MX_TIM7_Init>
  MX_TIM11_Init();
 8000bc0:	f000 f9e0 	bl	8000f84 <MX_TIM11_Init>
  MX_TIM10_Init();
 8000bc4:	f000 f9ba 	bl	8000f3c <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8000bc8:	4863      	ldr	r0, [pc, #396]	; (8000d58 <main+0x1b0>)
 8000bca:	f001 fcaf 	bl	800252c <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_7, GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2180      	movs	r1, #128	; 0x80
 8000bd2:	4862      	ldr	r0, [pc, #392]	; (8000d5c <main+0x1b4>)
 8000bd4:	f000 ff74 	bl	8001ac0 <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4861      	ldr	r0, [pc, #388]	; (8000d60 <main+0x1b8>)
 8000bdc:	f001 fd70 	bl	80026c0 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  state=IDLE;
 8000be0:	4b60      	ldr	r3, [pc, #384]	; (8000d64 <main+0x1bc>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(GPIOF,GPIO_PIN_2)){
 8000be6:	2104      	movs	r1, #4
 8000be8:	485f      	ldr	r0, [pc, #380]	; (8000d68 <main+0x1c0>)
 8000bea:	f000 ff51 	bl	8001a90 <HAL_GPIO_ReadPin>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d003      	beq.n	8000bfc <main+0x54>
		  state = K_FIND;
 8000bf4:	4b5b      	ldr	r3, [pc, #364]	; (8000d64 <main+0x1bc>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	701a      	strb	r2, [r3, #0]
 8000bfa:	e009      	b.n	8000c10 <main+0x68>
	  }
	  else if(HAL_GPIO_ReadPin(GPIOF,GPIO_PIN_3)){
 8000bfc:	2108      	movs	r1, #8
 8000bfe:	485a      	ldr	r0, [pc, #360]	; (8000d68 <main+0x1c0>)
 8000c00:	f000 ff46 	bl	8001a90 <HAL_GPIO_ReadPin>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d002      	beq.n	8000c10 <main+0x68>
		  state = TAU_FIND;
 8000c0a:	4b56      	ldr	r3, [pc, #344]	; (8000d64 <main+0x1bc>)
 8000c0c:	2202      	movs	r2, #2
 8000c0e:	701a      	strb	r2, [r3, #0]
	  }

	  TIM11->CCR1=400;
 8000c10:	4b56      	ldr	r3, [pc, #344]	; (8000d6c <main+0x1c4>)
 8000c12:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000c16:	635a      	str	r2, [r3, #52]	; 0x34
	  rpm1=(number_A_sampled*600)/1024;
 8000c18:	4b55      	ldr	r3, [pc, #340]	; (8000d70 <main+0x1c8>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000c20:	fb02 f303 	mul.w	r3, r2, r3
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	da01      	bge.n	8000c2c <main+0x84>
 8000c28:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8000c2c:	129b      	asrs	r3, r3, #10
 8000c2e:	ee07 3a90 	vmov	s15, r3
 8000c32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c36:	4b4f      	ldr	r3, [pc, #316]	; (8000d74 <main+0x1cc>)
 8000c38:	edc3 7a00 	vstr	s15, [r3]

	  switch(state)
 8000c3c:	4b49      	ldr	r3, [pc, #292]	; (8000d64 <main+0x1bc>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d002      	beq.n	8000c4a <main+0xa2>
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d02e      	beq.n	8000ca6 <main+0xfe>
 8000c48:	e07f      	b.n	8000d4a <main+0x1a2>
		  */
	  case K_FIND:

		  //TIM11->CCR1=400;
		  //rpm1=(number_A_sampled*600)/1024;
		  TIM11->CCR1=700;
 8000c4a:	4b48      	ldr	r3, [pc, #288]	; (8000d6c <main+0x1c4>)
 8000c4c:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000c50:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(2000);
 8000c52:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c56:	f000 fc49 	bl	80014ec <HAL_Delay>
		  rpm2=(number_A_sampled*600)/1024;
 8000c5a:	4b45      	ldr	r3, [pc, #276]	; (8000d70 <main+0x1c8>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000c62:	fb02 f303 	mul.w	r3, r2, r3
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	da01      	bge.n	8000c6e <main+0xc6>
 8000c6a:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8000c6e:	129b      	asrs	r3, r3, #10
 8000c70:	ee07 3a90 	vmov	s15, r3
 8000c74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c78:	4b3f      	ldr	r3, [pc, #252]	; (8000d78 <main+0x1d0>)
 8000c7a:	edc3 7a00 	vstr	s15, [r3]
		  k = (rpm2-rpm1)/((70-40)*12);
 8000c7e:	4b3e      	ldr	r3, [pc, #248]	; (8000d78 <main+0x1d0>)
 8000c80:	ed93 7a00 	vldr	s14, [r3]
 8000c84:	4b3b      	ldr	r3, [pc, #236]	; (8000d74 <main+0x1cc>)
 8000c86:	edd3 7a00 	vldr	s15, [r3]
 8000c8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c8e:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8000d7c <main+0x1d4>
 8000c92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c96:	4b3a      	ldr	r3, [pc, #232]	; (8000d80 <main+0x1d8>)
 8000c98:	edc3 7a00 	vstr	s15, [r3]
		  HAL_Delay(2000);
 8000c9c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ca0:	f000 fc24 	bl	80014ec <HAL_Delay>

		  break;
 8000ca4:	e051      	b.n	8000d4a <main+0x1a2>

	  case TAU_FIND:

		  TIM11->CCR1=400;
 8000ca6:	4b31      	ldr	r3, [pc, #196]	; (8000d6c <main+0x1c4>)
 8000ca8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000cac:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(1000);
 8000cae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cb2:	f000 fc1b 	bl	80014ec <HAL_Delay>
		  TIM11->CCR1=700;
 8000cb6:	4b2d      	ldr	r3, [pc, #180]	; (8000d6c <main+0x1c4>)
 8000cb8:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000cbc:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_TIM_Base_Start(&htim10);
 8000cbe:	4831      	ldr	r0, [pc, #196]	; (8000d84 <main+0x1dc>)
 8000cc0:	f001 fba4 	bl	800240c <HAL_TIM_Base_Start>

		  while(1){

			  rpm_t = (number_A_sampled*600)/1024;
 8000cc4:	4b2a      	ldr	r3, [pc, #168]	; (8000d70 <main+0x1c8>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000ccc:	fb02 f303 	mul.w	r3, r2, r3
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	da01      	bge.n	8000cd8 <main+0x130>
 8000cd4:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8000cd8:	129b      	asrs	r3, r3, #10
 8000cda:	ee07 3a90 	vmov	s15, r3
 8000cde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ce2:	4b29      	ldr	r3, [pc, #164]	; (8000d88 <main+0x1e0>)
 8000ce4:	edc3 7a00 	vstr	s15, [r3]
			  if(rpm_t>=.63*(rpm2-rpm1)){
 8000ce8:	4b27      	ldr	r3, [pc, #156]	; (8000d88 <main+0x1e0>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fcf9 	bl	80006e4 <__aeabi_f2d>
 8000cf2:	4604      	mov	r4, r0
 8000cf4:	460d      	mov	r5, r1
 8000cf6:	4b20      	ldr	r3, [pc, #128]	; (8000d78 <main+0x1d0>)
 8000cf8:	ed93 7a00 	vldr	s14, [r3]
 8000cfc:	4b1d      	ldr	r3, [pc, #116]	; (8000d74 <main+0x1cc>)
 8000cfe:	edd3 7a00 	vldr	s15, [r3]
 8000d02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d06:	ee17 0a90 	vmov	r0, s15
 8000d0a:	f7ff fceb 	bl	80006e4 <__aeabi_f2d>
 8000d0e:	a310      	add	r3, pc, #64	; (adr r3, 8000d50 <main+0x1a8>)
 8000d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d14:	f7ff fa58 	bl	80001c8 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4620      	mov	r0, r4
 8000d1e:	4629      	mov	r1, r5
 8000d20:	f7ff fdac 	bl	800087c <__aeabi_dcmpge>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d00e      	beq.n	8000d48 <main+0x1a0>
			  	HAL_TIM_Base_Stop(&htim10);
 8000d2a:	4816      	ldr	r0, [pc, #88]	; (8000d84 <main+0x1dc>)
 8000d2c:	f001 fbd6 	bl	80024dc <HAL_TIM_Base_Stop>
			  	TAU=__HAL_TIM_GetCounter(&htim10);
 8000d30:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <main+0x1dc>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d36:	ee07 3a90 	vmov	s15, r3
 8000d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d3e:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <main+0x1e4>)
 8000d40:	edc3 7a00 	vstr	s15, [r3]
			  	break;
 8000d44:	bf00      	nop
		          }

		  }
		  break;
 8000d46:	e000      	b.n	8000d4a <main+0x1a2>
			  rpm_t = (number_A_sampled*600)/1024;
 8000d48:	e7bc      	b.n	8000cc4 <main+0x11c>
	  state=IDLE;
 8000d4a:	e749      	b.n	8000be0 <main+0x38>
 8000d4c:	f3af 8000 	nop.w
 8000d50:	c28f5c29 	.word	0xc28f5c29
 8000d54:	3fe428f5 	.word	0x3fe428f5
 8000d58:	20000070 	.word	0x20000070
 8000d5c:	40021800 	.word	0x40021800
 8000d60:	20000100 	.word	0x20000100
 8000d64:	20000164 	.word	0x20000164
 8000d68:	40021400 	.word	0x40021400
 8000d6c:	40014800 	.word	0x40014800
 8000d70:	2000014c 	.word	0x2000014c
 8000d74:	20000154 	.word	0x20000154
 8000d78:	20000158 	.word	0x20000158
 8000d7c:	43b40000 	.word	0x43b40000
 8000d80:	2000015c 	.word	0x2000015c
 8000d84:	200000b8 	.word	0x200000b8
 8000d88:	20000150 	.word	0x20000150
 8000d8c:	20000160 	.word	0x20000160

08000d90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b094      	sub	sp, #80	; 0x50
 8000d94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d96:	f107 0320 	add.w	r3, r7, #32
 8000d9a:	2230      	movs	r2, #48	; 0x30
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f002 fa72 	bl	8003288 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da4:	f107 030c 	add.w	r3, r7, #12
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db4:	2300      	movs	r3, #0
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	4b28      	ldr	r3, [pc, #160]	; (8000e5c <SystemClock_Config+0xcc>)
 8000dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbc:	4a27      	ldr	r2, [pc, #156]	; (8000e5c <SystemClock_Config+0xcc>)
 8000dbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc4:	4b25      	ldr	r3, [pc, #148]	; (8000e5c <SystemClock_Config+0xcc>)
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	4b22      	ldr	r3, [pc, #136]	; (8000e60 <SystemClock_Config+0xd0>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a21      	ldr	r2, [pc, #132]	; (8000e60 <SystemClock_Config+0xd0>)
 8000dda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dde:	6013      	str	r3, [r2, #0]
 8000de0:	4b1f      	ldr	r3, [pc, #124]	; (8000e60 <SystemClock_Config+0xd0>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dec:	2302      	movs	r3, #2
 8000dee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000df0:	2301      	movs	r3, #1
 8000df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000df4:	2310      	movs	r3, #16
 8000df6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e00:	2308      	movs	r3, #8
 8000e02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000e04:	2340      	movs	r3, #64	; 0x40
 8000e06:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e0c:	2304      	movs	r3, #4
 8000e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e10:	f107 0320 	add.w	r3, r7, #32
 8000e14:	4618      	mov	r0, r3
 8000e16:	f000 fe85 	bl	8001b24 <HAL_RCC_OscConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e20:	f000 f996 	bl	8001150 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e24:	230f      	movs	r3, #15
 8000e26:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e3c:	f107 030c 	add.w	r3, r7, #12
 8000e40:	2102      	movs	r1, #2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f001 f8e6 	bl	8002014 <HAL_RCC_ClockConfig>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e4e:	f000 f97f 	bl	8001150 <Error_Handler>
  }
}
 8000e52:	bf00      	nop
 8000e54:	3750      	adds	r7, #80	; 0x50
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40007000 	.word	0x40007000

08000e64 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <MX_TIM6_Init+0x64>)
 8000e74:	4a15      	ldr	r2, [pc, #84]	; (8000ecc <MX_TIM6_Init+0x68>)
 8000e76:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999;
 8000e78:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <MX_TIM6_Init+0x64>)
 8000e7a:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000e7e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e80:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <MX_TIM6_Init+0x64>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <MX_TIM6_Init+0x64>)
 8000e88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e8c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <MX_TIM6_Init+0x64>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e94:	480c      	ldr	r0, [pc, #48]	; (8000ec8 <MX_TIM6_Init+0x64>)
 8000e96:	f001 fa69 	bl	800236c <HAL_TIM_Base_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000ea0:	f000 f956 	bl	8001150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000eac:	463b      	mov	r3, r7
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <MX_TIM6_Init+0x64>)
 8000eb2:	f002 f935 	bl	8003120 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000ebc:	f000 f948 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000028 	.word	0x20000028
 8000ecc:	40001000 	.word	0x40001000

08000ed0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000ede:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <MX_TIM7_Init+0x64>)
 8000ee0:	4a15      	ldr	r2, [pc, #84]	; (8000f38 <MX_TIM7_Init+0x68>)
 8000ee2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 6399;
 8000ee4:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <MX_TIM7_Init+0x64>)
 8000ee6:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8000eea:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eec:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <MX_TIM7_Init+0x64>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <MX_TIM7_Init+0x64>)
 8000ef4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ef8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <MX_TIM7_Init+0x64>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000f00:	480c      	ldr	r0, [pc, #48]	; (8000f34 <MX_TIM7_Init+0x64>)
 8000f02:	f001 fa33 	bl	800236c <HAL_TIM_Base_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000f0c:	f000 f920 	bl	8001150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f10:	2300      	movs	r3, #0
 8000f12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f14:	2300      	movs	r3, #0
 8000f16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000f18:	463b      	mov	r3, r7
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4805      	ldr	r0, [pc, #20]	; (8000f34 <MX_TIM7_Init+0x64>)
 8000f1e:	f002 f8ff 	bl	8003120 <HAL_TIMEx_MasterConfigSynchronization>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000f28:	f000 f912 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000070 	.word	0x20000070
 8000f38:	40001400 	.word	0x40001400

08000f3c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000f40:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <MX_TIM10_Init+0x40>)
 8000f42:	4a0f      	ldr	r2, [pc, #60]	; (8000f80 <MX_TIM10_Init+0x44>)
 8000f44:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 63;
 8000f46:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <MX_TIM10_Init+0x40>)
 8000f48:	223f      	movs	r2, #63	; 0x3f
 8000f4a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4c:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <MX_TIM10_Init+0x40>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <MX_TIM10_Init+0x40>)
 8000f54:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f58:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f5a:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <MX_TIM10_Init+0x40>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <MX_TIM10_Init+0x40>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000f66:	4805      	ldr	r0, [pc, #20]	; (8000f7c <MX_TIM10_Init+0x40>)
 8000f68:	f001 fa00 	bl	800236c <HAL_TIM_Base_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8000f72:	f000 f8ed 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200000b8 	.word	0x200000b8
 8000f80:	40014400 	.word	0x40014400

08000f84 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
 8000f98:	615a      	str	r2, [r3, #20]
 8000f9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000f9c:	4b1e      	ldr	r3, [pc, #120]	; (8001018 <MX_TIM11_Init+0x94>)
 8000f9e:	4a1f      	ldr	r2, [pc, #124]	; (800101c <MX_TIM11_Init+0x98>)
 8000fa0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 3;
 8000fa2:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <MX_TIM11_Init+0x94>)
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa8:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <MX_TIM11_Init+0x94>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000;
 8000fae:	4b1a      	ldr	r3, [pc, #104]	; (8001018 <MX_TIM11_Init+0x94>)
 8000fb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fb4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb6:	4b18      	ldr	r3, [pc, #96]	; (8001018 <MX_TIM11_Init+0x94>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fbc:	4b16      	ldr	r3, [pc, #88]	; (8001018 <MX_TIM11_Init+0x94>)
 8000fbe:	2280      	movs	r2, #128	; 0x80
 8000fc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000fc2:	4815      	ldr	r0, [pc, #84]	; (8001018 <MX_TIM11_Init+0x94>)
 8000fc4:	f001 f9d2 	bl	800236c <HAL_TIM_Base_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8000fce:	f000 f8bf 	bl	8001150 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8000fd2:	4811      	ldr	r0, [pc, #68]	; (8001018 <MX_TIM11_Init+0x94>)
 8000fd4:	f001 fb1a 	bl	800260c <HAL_TIM_PWM_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8000fde:	f000 f8b7 	bl	8001150 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fe2:	2360      	movs	r3, #96	; 0x60
 8000fe4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8000fe6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4807      	ldr	r0, [pc, #28]	; (8001018 <MX_TIM11_Init+0x94>)
 8000ffc:	f001 fd30 	bl	8002a60 <HAL_TIM_PWM_ConfigChannel>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM11_Init+0x86>
  {
    Error_Handler();
 8001006:	f000 f8a3 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 800100a:	4803      	ldr	r0, [pc, #12]	; (8001018 <MX_TIM11_Init+0x94>)
 800100c:	f000 f940 	bl	8001290 <HAL_TIM_MspPostInit>

}
 8001010:	bf00      	nop
 8001012:	3720      	adds	r7, #32
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000100 	.word	0x20000100
 800101c:	40014800 	.word	0x40014800

08001020 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001026:	f107 030c 	add.w	r3, r7, #12
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	60da      	str	r2, [r3, #12]
 8001034:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	4b29      	ldr	r3, [pc, #164]	; (80010e0 <MX_GPIO_Init+0xc0>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a28      	ldr	r2, [pc, #160]	; (80010e0 <MX_GPIO_Init+0xc0>)
 8001040:	f043 0320 	orr.w	r3, r3, #32
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b26      	ldr	r3, [pc, #152]	; (80010e0 <MX_GPIO_Init+0xc0>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0320 	and.w	r3, r3, #32
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <MX_GPIO_Init+0xc0>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a21      	ldr	r2, [pc, #132]	; (80010e0 <MX_GPIO_Init+0xc0>)
 800105c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <MX_GPIO_Init+0xc0>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	21a0      	movs	r1, #160	; 0xa0
 8001072:	481c      	ldr	r0, [pc, #112]	; (80010e4 <MX_GPIO_Init+0xc4>)
 8001074:	f000 fd24 	bl	8001ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF2 PF3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001078:	230c      	movs	r3, #12
 800107a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800107c:	2300      	movs	r3, #0
 800107e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	4619      	mov	r1, r3
 800108a:	4817      	ldr	r0, [pc, #92]	; (80010e8 <MX_GPIO_Init+0xc8>)
 800108c:	f000 fb64 	bl	8001758 <HAL_GPIO_Init>

  /*Configure GPIO pin : A_signal_Pin */
  GPIO_InitStruct.Pin = A_signal_Pin;
 8001090:	2340      	movs	r3, #64	; 0x40
 8001092:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001094:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001098:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(A_signal_GPIO_Port, &GPIO_InitStruct);
 800109e:	f107 030c 	add.w	r3, r7, #12
 80010a2:	4619      	mov	r1, r3
 80010a4:	4810      	ldr	r0, [pc, #64]	; (80010e8 <MX_GPIO_Init+0xc8>)
 80010a6:	f000 fb57 	bl	8001758 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG5 PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80010aa:	23a0      	movs	r3, #160	; 0xa0
 80010ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ae:	2301      	movs	r3, #1
 80010b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010ba:	f107 030c 	add.w	r3, r7, #12
 80010be:	4619      	mov	r1, r3
 80010c0:	4808      	ldr	r0, [pc, #32]	; (80010e4 <MX_GPIO_Init+0xc4>)
 80010c2:	f000 fb49 	bl	8001758 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2100      	movs	r1, #0
 80010ca:	2017      	movs	r0, #23
 80010cc:	f000 fb0d 	bl	80016ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010d0:	2017      	movs	r0, #23
 80010d2:	f000 fb26 	bl	8001722 <HAL_NVIC_EnableIRQ>

}
 80010d6:	bf00      	nop
 80010d8:	3720      	adds	r7, #32
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40021800 	.word	0x40021800
 80010e8:	40021400 	.word	0x40021400

080010ec <HAL_TIM_PeriodElapsedCallback>:

	}
}
*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM7){
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a07      	ldr	r2, [pc, #28]	; (8001118 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d106      	bne.n	800110c <HAL_TIM_PeriodElapsedCallback+0x20>
		number_A_sampled=number_A;
 80010fe:	4b07      	ldr	r3, [pc, #28]	; (800111c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a07      	ldr	r2, [pc, #28]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001104:	6013      	str	r3, [r2, #0]
		number_A=0;
 8001106:	4b05      	ldr	r3, [pc, #20]	; (800111c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
		}
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	40001400 	.word	0x40001400
 800111c:	20000148 	.word	0x20000148
 8001120:	2000014c 	.word	0x2000014c

08001124 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	80fb      	strh	r3, [r7, #6]
	if(pin == GPIO_PIN_6){
 800112e:	88fb      	ldrh	r3, [r7, #6]
 8001130:	2b40      	cmp	r3, #64	; 0x40
 8001132:	d104      	bne.n	800113e <HAL_GPIO_EXTI_Callback+0x1a>
		number_A++;
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <HAL_GPIO_EXTI_Callback+0x28>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	3301      	adds	r3, #1
 800113a:	4a04      	ldr	r2, [pc, #16]	; (800114c <HAL_GPIO_EXTI_Callback+0x28>)
 800113c:	6013      	str	r3, [r2, #0]
		 }
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	20000148 	.word	0x20000148

08001150 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001154:	b672      	cpsid	i
}
 8001156:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001158:	e7fe      	b.n	8001158 <Error_Handler+0x8>
	...

0800115c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <HAL_MspInit+0x4c>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	4a0f      	ldr	r2, [pc, #60]	; (80011a8 <HAL_MspInit+0x4c>)
 800116c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001170:	6453      	str	r3, [r2, #68]	; 0x44
 8001172:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <HAL_MspInit+0x4c>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	603b      	str	r3, [r7, #0]
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <HAL_MspInit+0x4c>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	4a08      	ldr	r2, [pc, #32]	; (80011a8 <HAL_MspInit+0x4c>)
 8001188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800118c:	6413      	str	r3, [r2, #64]	; 0x40
 800118e:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <HAL_MspInit+0x4c>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800

080011ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a30      	ldr	r2, [pc, #192]	; (800127c <HAL_TIM_Base_MspInit+0xd0>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d116      	bne.n	80011ec <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
 80011c2:	4b2f      	ldr	r3, [pc, #188]	; (8001280 <HAL_TIM_Base_MspInit+0xd4>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	4a2e      	ldr	r2, [pc, #184]	; (8001280 <HAL_TIM_Base_MspInit+0xd4>)
 80011c8:	f043 0310 	orr.w	r3, r3, #16
 80011cc:	6413      	str	r3, [r2, #64]	; 0x40
 80011ce:	4b2c      	ldr	r3, [pc, #176]	; (8001280 <HAL_TIM_Base_MspInit+0xd4>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	f003 0310 	and.w	r3, r3, #16
 80011d6:	617b      	str	r3, [r7, #20]
 80011d8:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2100      	movs	r1, #0
 80011de:	2036      	movs	r0, #54	; 0x36
 80011e0:	f000 fa83 	bl	80016ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011e4:	2036      	movs	r0, #54	; 0x36
 80011e6:	f000 fa9c 	bl	8001722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80011ea:	e042      	b.n	8001272 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM7)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a24      	ldr	r2, [pc, #144]	; (8001284 <HAL_TIM_Base_MspInit+0xd8>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d116      	bne.n	8001224 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	4b21      	ldr	r3, [pc, #132]	; (8001280 <HAL_TIM_Base_MspInit+0xd4>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	4a20      	ldr	r2, [pc, #128]	; (8001280 <HAL_TIM_Base_MspInit+0xd4>)
 8001200:	f043 0320 	orr.w	r3, r3, #32
 8001204:	6413      	str	r3, [r2, #64]	; 0x40
 8001206:	4b1e      	ldr	r3, [pc, #120]	; (8001280 <HAL_TIM_Base_MspInit+0xd4>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	f003 0320 	and.w	r3, r3, #32
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2100      	movs	r1, #0
 8001216:	2037      	movs	r0, #55	; 0x37
 8001218:	f000 fa67 	bl	80016ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800121c:	2037      	movs	r0, #55	; 0x37
 800121e:	f000 fa80 	bl	8001722 <HAL_NVIC_EnableIRQ>
}
 8001222:	e026      	b.n	8001272 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM10)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a17      	ldr	r2, [pc, #92]	; (8001288 <HAL_TIM_Base_MspInit+0xdc>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d10e      	bne.n	800124c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	4b13      	ldr	r3, [pc, #76]	; (8001280 <HAL_TIM_Base_MspInit+0xd4>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	4a12      	ldr	r2, [pc, #72]	; (8001280 <HAL_TIM_Base_MspInit+0xd4>)
 8001238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800123c:	6453      	str	r3, [r2, #68]	; 0x44
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <HAL_TIM_Base_MspInit+0xd4>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
}
 800124a:	e012      	b.n	8001272 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM11)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a0e      	ldr	r2, [pc, #56]	; (800128c <HAL_TIM_Base_MspInit+0xe0>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d10d      	bne.n	8001272 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <HAL_TIM_Base_MspInit+0xd4>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	4a08      	ldr	r2, [pc, #32]	; (8001280 <HAL_TIM_Base_MspInit+0xd4>)
 8001260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001264:	6453      	str	r3, [r2, #68]	; 0x44
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <HAL_TIM_Base_MspInit+0xd4>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	68bb      	ldr	r3, [r7, #8]
}
 8001272:	bf00      	nop
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40001000 	.word	0x40001000
 8001280:	40023800 	.word	0x40023800
 8001284:	40001400 	.word	0x40001400
 8001288:	40014400 	.word	0x40014400
 800128c:	40014800 	.word	0x40014800

08001290 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM11)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a12      	ldr	r2, [pc, #72]	; (80012f8 <HAL_TIM_MspPostInit+0x68>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d11d      	bne.n	80012ee <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM11_MspPostInit 0 */

  /* USER CODE END TIM11_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	4b11      	ldr	r3, [pc, #68]	; (80012fc <HAL_TIM_MspPostInit+0x6c>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a10      	ldr	r2, [pc, #64]	; (80012fc <HAL_TIM_MspPostInit+0x6c>)
 80012bc:	f043 0320 	orr.w	r3, r3, #32
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <HAL_TIM_MspPostInit+0x6c>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0320 	and.w	r3, r3, #32
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM11 GPIO Configuration
    PF7     ------> TIM11_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012ce:	2380      	movs	r3, #128	; 0x80
 80012d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012da:	2300      	movs	r3, #0
 80012dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80012de:	2303      	movs	r3, #3
 80012e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012e2:	f107 030c 	add.w	r3, r7, #12
 80012e6:	4619      	mov	r1, r3
 80012e8:	4805      	ldr	r0, [pc, #20]	; (8001300 <HAL_TIM_MspPostInit+0x70>)
 80012ea:	f000 fa35 	bl	8001758 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80012ee:	bf00      	nop
 80012f0:	3720      	adds	r7, #32
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40014800 	.word	0x40014800
 80012fc:	40023800 	.word	0x40023800
 8001300:	40021400 	.word	0x40021400

08001304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <NMI_Handler+0x4>

0800130a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800130e:	e7fe      	b.n	800130e <HardFault_Handler+0x4>

08001310 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001314:	e7fe      	b.n	8001314 <MemManage_Handler+0x4>

08001316 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800131a:	e7fe      	b.n	800131a <BusFault_Handler+0x4>

0800131c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <UsageFault_Handler+0x4>

08001322 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001350:	f000 f8ac 	bl	80014ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}

08001358 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(A_signal_Pin);
 800135c:	2040      	movs	r0, #64	; 0x40
 800135e:	f000 fbc9 	bl	8001af4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800136c:	4802      	ldr	r0, [pc, #8]	; (8001378 <TIM6_DAC_IRQHandler+0x10>)
 800136e:	f001 fa6f 	bl	8002850 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  //t6++;

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000028 	.word	0x20000028

0800137c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <TIM7_IRQHandler+0x10>)
 8001382:	f001 fa65 	bl	8002850 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000070 	.word	0x20000070

08001390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <SystemInit+0x20>)
 8001396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800139a:	4a05      	ldr	r2, [pc, #20]	; (80013b0 <SystemInit+0x20>)
 800139c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013b8:	480d      	ldr	r0, [pc, #52]	; (80013f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013ba:	490e      	ldr	r1, [pc, #56]	; (80013f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013bc:	4a0e      	ldr	r2, [pc, #56]	; (80013f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c0:	e002      	b.n	80013c8 <LoopCopyDataInit>

080013c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013c6:	3304      	adds	r3, #4

080013c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013cc:	d3f9      	bcc.n	80013c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ce:	4a0b      	ldr	r2, [pc, #44]	; (80013fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013d0:	4c0b      	ldr	r4, [pc, #44]	; (8001400 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d4:	e001      	b.n	80013da <LoopFillZerobss>

080013d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d8:	3204      	adds	r2, #4

080013da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013dc:	d3fb      	bcc.n	80013d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013de:	f7ff ffd7 	bl	8001390 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013e2:	f001 ff2d 	bl	8003240 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013e6:	f7ff fbdf 	bl	8000ba8 <main>
  bx  lr    
 80013ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013f8:	080032d0 	.word	0x080032d0
  ldr r2, =_sbss
 80013fc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001400:	2000016c 	.word	0x2000016c

08001404 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001404:	e7fe      	b.n	8001404 <ADC_IRQHandler>
	...

08001408 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800140c:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <HAL_Init+0x40>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a0d      	ldr	r2, [pc, #52]	; (8001448 <HAL_Init+0x40>)
 8001412:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001416:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001418:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <HAL_Init+0x40>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <HAL_Init+0x40>)
 800141e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001422:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001424:	4b08      	ldr	r3, [pc, #32]	; (8001448 <HAL_Init+0x40>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a07      	ldr	r2, [pc, #28]	; (8001448 <HAL_Init+0x40>)
 800142a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800142e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001430:	2003      	movs	r0, #3
 8001432:	f000 f94f 	bl	80016d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001436:	200f      	movs	r0, #15
 8001438:	f000 f808 	bl	800144c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800143c:	f7ff fe8e 	bl	800115c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40023c00 	.word	0x40023c00

0800144c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001454:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <HAL_InitTick+0x54>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <HAL_InitTick+0x58>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	4619      	mov	r1, r3
 800145e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001462:	fbb3 f3f1 	udiv	r3, r3, r1
 8001466:	fbb2 f3f3 	udiv	r3, r2, r3
 800146a:	4618      	mov	r0, r3
 800146c:	f000 f967 	bl	800173e <HAL_SYSTICK_Config>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e00e      	b.n	8001498 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2b0f      	cmp	r3, #15
 800147e:	d80a      	bhi.n	8001496 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001480:	2200      	movs	r2, #0
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	f04f 30ff 	mov.w	r0, #4294967295
 8001488:	f000 f92f 	bl	80016ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800148c:	4a06      	ldr	r2, [pc, #24]	; (80014a8 <HAL_InitTick+0x5c>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001492:	2300      	movs	r3, #0
 8001494:	e000      	b.n	8001498 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
}
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000000 	.word	0x20000000
 80014a4:	20000008 	.word	0x20000008
 80014a8:	20000004 	.word	0x20000004

080014ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <HAL_IncTick+0x20>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_IncTick+0x24>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4413      	add	r3, r2
 80014bc:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <HAL_IncTick+0x24>)
 80014be:	6013      	str	r3, [r2, #0]
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	20000008 	.word	0x20000008
 80014d0:	20000168 	.word	0x20000168

080014d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return uwTick;
 80014d8:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <HAL_GetTick+0x14>)
 80014da:	681b      	ldr	r3, [r3, #0]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	20000168 	.word	0x20000168

080014ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f4:	f7ff ffee 	bl	80014d4 <HAL_GetTick>
 80014f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001504:	d005      	beq.n	8001512 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <HAL_Delay+0x44>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	461a      	mov	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4413      	add	r3, r2
 8001510:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001512:	bf00      	nop
 8001514:	f7ff ffde 	bl	80014d4 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	429a      	cmp	r2, r3
 8001522:	d8f7      	bhi.n	8001514 <HAL_Delay+0x28>
  {
  }
}
 8001524:	bf00      	nop
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000008 	.word	0x20000008

08001534 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <__NVIC_SetPriorityGrouping+0x44>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800154a:	68ba      	ldr	r2, [r7, #8]
 800154c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001550:	4013      	ands	r3, r2
 8001552:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800155c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001566:	4a04      	ldr	r2, [pc, #16]	; (8001578 <__NVIC_SetPriorityGrouping+0x44>)
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	60d3      	str	r3, [r2, #12]
}
 800156c:	bf00      	nop
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001580:	4b04      	ldr	r3, [pc, #16]	; (8001594 <__NVIC_GetPriorityGrouping+0x18>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	0a1b      	lsrs	r3, r3, #8
 8001586:	f003 0307 	and.w	r3, r3, #7
}
 800158a:	4618      	mov	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	db0b      	blt.n	80015c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	f003 021f 	and.w	r2, r3, #31
 80015b0:	4907      	ldr	r1, [pc, #28]	; (80015d0 <__NVIC_EnableIRQ+0x38>)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	095b      	lsrs	r3, r3, #5
 80015b8:	2001      	movs	r0, #1
 80015ba:	fa00 f202 	lsl.w	r2, r0, r2
 80015be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	e000e100 	.word	0xe000e100

080015d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	6039      	str	r1, [r7, #0]
 80015de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	db0a      	blt.n	80015fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	490c      	ldr	r1, [pc, #48]	; (8001620 <__NVIC_SetPriority+0x4c>)
 80015ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f2:	0112      	lsls	r2, r2, #4
 80015f4:	b2d2      	uxtb	r2, r2
 80015f6:	440b      	add	r3, r1
 80015f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015fc:	e00a      	b.n	8001614 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	b2da      	uxtb	r2, r3
 8001602:	4908      	ldr	r1, [pc, #32]	; (8001624 <__NVIC_SetPriority+0x50>)
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	f003 030f 	and.w	r3, r3, #15
 800160a:	3b04      	subs	r3, #4
 800160c:	0112      	lsls	r2, r2, #4
 800160e:	b2d2      	uxtb	r2, r2
 8001610:	440b      	add	r3, r1
 8001612:	761a      	strb	r2, [r3, #24]
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000e100 	.word	0xe000e100
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001628:	b480      	push	{r7}
 800162a:	b089      	sub	sp, #36	; 0x24
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	f1c3 0307 	rsb	r3, r3, #7
 8001642:	2b04      	cmp	r3, #4
 8001644:	bf28      	it	cs
 8001646:	2304      	movcs	r3, #4
 8001648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	3304      	adds	r3, #4
 800164e:	2b06      	cmp	r3, #6
 8001650:	d902      	bls.n	8001658 <NVIC_EncodePriority+0x30>
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3b03      	subs	r3, #3
 8001656:	e000      	b.n	800165a <NVIC_EncodePriority+0x32>
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800165c:	f04f 32ff 	mov.w	r2, #4294967295
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43da      	mvns	r2, r3
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	401a      	ands	r2, r3
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001670:	f04f 31ff 	mov.w	r1, #4294967295
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	fa01 f303 	lsl.w	r3, r1, r3
 800167a:	43d9      	mvns	r1, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	4313      	orrs	r3, r2
         );
}
 8001682:	4618      	mov	r0, r3
 8001684:	3724      	adds	r7, #36	; 0x24
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
	...

08001690 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3b01      	subs	r3, #1
 800169c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016a0:	d301      	bcc.n	80016a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016a2:	2301      	movs	r3, #1
 80016a4:	e00f      	b.n	80016c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016a6:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <SysTick_Config+0x40>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ae:	210f      	movs	r1, #15
 80016b0:	f04f 30ff 	mov.w	r0, #4294967295
 80016b4:	f7ff ff8e 	bl	80015d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <SysTick_Config+0x40>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016be:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <SysTick_Config+0x40>)
 80016c0:	2207      	movs	r2, #7
 80016c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	e000e010 	.word	0xe000e010

080016d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff ff29 	bl	8001534 <__NVIC_SetPriorityGrouping>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b086      	sub	sp, #24
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4603      	mov	r3, r0
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
 80016f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016fc:	f7ff ff3e 	bl	800157c <__NVIC_GetPriorityGrouping>
 8001700:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	68b9      	ldr	r1, [r7, #8]
 8001706:	6978      	ldr	r0, [r7, #20]
 8001708:	f7ff ff8e 	bl	8001628 <NVIC_EncodePriority>
 800170c:	4602      	mov	r2, r0
 800170e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001712:	4611      	mov	r1, r2
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff5d 	bl	80015d4 <__NVIC_SetPriority>
}
 800171a:	bf00      	nop
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff31 	bl	8001598 <__NVIC_EnableIRQ>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff ffa2 	bl	8001690 <SysTick_Config>
 800174c:	4603      	mov	r3, r0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001758:	b480      	push	{r7}
 800175a:	b089      	sub	sp, #36	; 0x24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001766:	2300      	movs	r3, #0
 8001768:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800176a:	2300      	movs	r3, #0
 800176c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
 8001772:	e16b      	b.n	8001a4c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001774:	2201      	movs	r2, #1
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	4013      	ands	r3, r2
 8001786:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	429a      	cmp	r2, r3
 800178e:	f040 815a 	bne.w	8001a46 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f003 0303 	and.w	r3, r3, #3
 800179a:	2b01      	cmp	r3, #1
 800179c:	d005      	beq.n	80017aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d130      	bne.n	800180c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	2203      	movs	r2, #3
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43db      	mvns	r3, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4013      	ands	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	68da      	ldr	r2, [r3, #12]
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017e0:	2201      	movs	r2, #1
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4013      	ands	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	091b      	lsrs	r3, r3, #4
 80017f6:	f003 0201 	and.w	r2, r3, #1
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4313      	orrs	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	2b03      	cmp	r3, #3
 8001816:	d017      	beq.n	8001848 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	2203      	movs	r2, #3
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4013      	ands	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 0303 	and.w	r3, r3, #3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d123      	bne.n	800189c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	08da      	lsrs	r2, r3, #3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3208      	adds	r2, #8
 800185c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001860:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	220f      	movs	r2, #15
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4013      	ands	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	691a      	ldr	r2, [r3, #16]
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	08da      	lsrs	r2, r3, #3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3208      	adds	r2, #8
 8001896:	69b9      	ldr	r1, [r7, #24]
 8001898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	2203      	movs	r2, #3
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4013      	ands	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 0203 	and.w	r2, r3, #3
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f000 80b4 	beq.w	8001a46 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	4b60      	ldr	r3, [pc, #384]	; (8001a64 <HAL_GPIO_Init+0x30c>)
 80018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e6:	4a5f      	ldr	r2, [pc, #380]	; (8001a64 <HAL_GPIO_Init+0x30c>)
 80018e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ec:	6453      	str	r3, [r2, #68]	; 0x44
 80018ee:	4b5d      	ldr	r3, [pc, #372]	; (8001a64 <HAL_GPIO_Init+0x30c>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018fa:	4a5b      	ldr	r2, [pc, #364]	; (8001a68 <HAL_GPIO_Init+0x310>)
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	089b      	lsrs	r3, r3, #2
 8001900:	3302      	adds	r3, #2
 8001902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f003 0303 	and.w	r3, r3, #3
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	220f      	movs	r2, #15
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4013      	ands	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a52      	ldr	r2, [pc, #328]	; (8001a6c <HAL_GPIO_Init+0x314>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d02b      	beq.n	800197e <HAL_GPIO_Init+0x226>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a51      	ldr	r2, [pc, #324]	; (8001a70 <HAL_GPIO_Init+0x318>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d025      	beq.n	800197a <HAL_GPIO_Init+0x222>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a50      	ldr	r2, [pc, #320]	; (8001a74 <HAL_GPIO_Init+0x31c>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d01f      	beq.n	8001976 <HAL_GPIO_Init+0x21e>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a4f      	ldr	r2, [pc, #316]	; (8001a78 <HAL_GPIO_Init+0x320>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d019      	beq.n	8001972 <HAL_GPIO_Init+0x21a>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a4e      	ldr	r2, [pc, #312]	; (8001a7c <HAL_GPIO_Init+0x324>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d013      	beq.n	800196e <HAL_GPIO_Init+0x216>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a4d      	ldr	r2, [pc, #308]	; (8001a80 <HAL_GPIO_Init+0x328>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d00d      	beq.n	800196a <HAL_GPIO_Init+0x212>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a4c      	ldr	r2, [pc, #304]	; (8001a84 <HAL_GPIO_Init+0x32c>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d007      	beq.n	8001966 <HAL_GPIO_Init+0x20e>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a4b      	ldr	r2, [pc, #300]	; (8001a88 <HAL_GPIO_Init+0x330>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d101      	bne.n	8001962 <HAL_GPIO_Init+0x20a>
 800195e:	2307      	movs	r3, #7
 8001960:	e00e      	b.n	8001980 <HAL_GPIO_Init+0x228>
 8001962:	2308      	movs	r3, #8
 8001964:	e00c      	b.n	8001980 <HAL_GPIO_Init+0x228>
 8001966:	2306      	movs	r3, #6
 8001968:	e00a      	b.n	8001980 <HAL_GPIO_Init+0x228>
 800196a:	2305      	movs	r3, #5
 800196c:	e008      	b.n	8001980 <HAL_GPIO_Init+0x228>
 800196e:	2304      	movs	r3, #4
 8001970:	e006      	b.n	8001980 <HAL_GPIO_Init+0x228>
 8001972:	2303      	movs	r3, #3
 8001974:	e004      	b.n	8001980 <HAL_GPIO_Init+0x228>
 8001976:	2302      	movs	r3, #2
 8001978:	e002      	b.n	8001980 <HAL_GPIO_Init+0x228>
 800197a:	2301      	movs	r3, #1
 800197c:	e000      	b.n	8001980 <HAL_GPIO_Init+0x228>
 800197e:	2300      	movs	r3, #0
 8001980:	69fa      	ldr	r2, [r7, #28]
 8001982:	f002 0203 	and.w	r2, r2, #3
 8001986:	0092      	lsls	r2, r2, #2
 8001988:	4093      	lsls	r3, r2
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4313      	orrs	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001990:	4935      	ldr	r1, [pc, #212]	; (8001a68 <HAL_GPIO_Init+0x310>)
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	089b      	lsrs	r3, r3, #2
 8001996:	3302      	adds	r3, #2
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800199e:	4b3b      	ldr	r3, [pc, #236]	; (8001a8c <HAL_GPIO_Init+0x334>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	43db      	mvns	r3, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4013      	ands	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019c2:	4a32      	ldr	r2, [pc, #200]	; (8001a8c <HAL_GPIO_Init+0x334>)
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019c8:	4b30      	ldr	r3, [pc, #192]	; (8001a8c <HAL_GPIO_Init+0x334>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	43db      	mvns	r3, r3
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4013      	ands	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019ec:	4a27      	ldr	r2, [pc, #156]	; (8001a8c <HAL_GPIO_Init+0x334>)
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019f2:	4b26      	ldr	r3, [pc, #152]	; (8001a8c <HAL_GPIO_Init+0x334>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	43db      	mvns	r3, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4013      	ands	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a16:	4a1d      	ldr	r2, [pc, #116]	; (8001a8c <HAL_GPIO_Init+0x334>)
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <HAL_GPIO_Init+0x334>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	43db      	mvns	r3, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a40:	4a12      	ldr	r2, [pc, #72]	; (8001a8c <HAL_GPIO_Init+0x334>)
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	61fb      	str	r3, [r7, #28]
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	2b0f      	cmp	r3, #15
 8001a50:	f67f ae90 	bls.w	8001774 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a54:	bf00      	nop
 8001a56:	bf00      	nop
 8001a58:	3724      	adds	r7, #36	; 0x24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40013800 	.word	0x40013800
 8001a6c:	40020000 	.word	0x40020000
 8001a70:	40020400 	.word	0x40020400
 8001a74:	40020800 	.word	0x40020800
 8001a78:	40020c00 	.word	0x40020c00
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40021400 	.word	0x40021400
 8001a84:	40021800 	.word	0x40021800
 8001a88:	40021c00 	.word	0x40021c00
 8001a8c:	40013c00 	.word	0x40013c00

08001a90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691a      	ldr	r2, [r3, #16]
 8001aa0:	887b      	ldrh	r3, [r7, #2]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d002      	beq.n	8001aae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	73fb      	strb	r3, [r7, #15]
 8001aac:	e001      	b.n	8001ab2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	807b      	strh	r3, [r7, #2]
 8001acc:	4613      	mov	r3, r2
 8001ace:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ad0:	787b      	ldrb	r3, [r7, #1]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ad6:	887a      	ldrh	r2, [r7, #2]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001adc:	e003      	b.n	8001ae6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ade:	887b      	ldrh	r3, [r7, #2]
 8001ae0:	041a      	lsls	r2, r3, #16
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	619a      	str	r2, [r3, #24]
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
	...

08001af4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001afe:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b00:	695a      	ldr	r2, [r3, #20]
 8001b02:	88fb      	ldrh	r3, [r7, #6]
 8001b04:	4013      	ands	r3, r2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d006      	beq.n	8001b18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b0a:	4a05      	ldr	r2, [pc, #20]	; (8001b20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b0c:	88fb      	ldrh	r3, [r7, #6]
 8001b0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b10:	88fb      	ldrh	r3, [r7, #6]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fb06 	bl	8001124 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b18:	bf00      	nop
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40013c00 	.word	0x40013c00

08001b24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e267      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d075      	beq.n	8001c2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b42:	4b88      	ldr	r3, [pc, #544]	; (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 030c 	and.w	r3, r3, #12
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	d00c      	beq.n	8001b68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b4e:	4b85      	ldr	r3, [pc, #532]	; (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b56:	2b08      	cmp	r3, #8
 8001b58:	d112      	bne.n	8001b80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b5a:	4b82      	ldr	r3, [pc, #520]	; (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b66:	d10b      	bne.n	8001b80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b68:	4b7e      	ldr	r3, [pc, #504]	; (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d05b      	beq.n	8001c2c <HAL_RCC_OscConfig+0x108>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d157      	bne.n	8001c2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e242      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b88:	d106      	bne.n	8001b98 <HAL_RCC_OscConfig+0x74>
 8001b8a:	4b76      	ldr	r3, [pc, #472]	; (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a75      	ldr	r2, [pc, #468]	; (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	e01d      	b.n	8001bd4 <HAL_RCC_OscConfig+0xb0>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ba0:	d10c      	bne.n	8001bbc <HAL_RCC_OscConfig+0x98>
 8001ba2:	4b70      	ldr	r3, [pc, #448]	; (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a6f      	ldr	r2, [pc, #444]	; (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001ba8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	4b6d      	ldr	r3, [pc, #436]	; (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a6c      	ldr	r2, [pc, #432]	; (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	e00b      	b.n	8001bd4 <HAL_RCC_OscConfig+0xb0>
 8001bbc:	4b69      	ldr	r3, [pc, #420]	; (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a68      	ldr	r2, [pc, #416]	; (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bc6:	6013      	str	r3, [r2, #0]
 8001bc8:	4b66      	ldr	r3, [pc, #408]	; (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a65      	ldr	r2, [pc, #404]	; (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001bce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d013      	beq.n	8001c04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bdc:	f7ff fc7a 	bl	80014d4 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001be4:	f7ff fc76 	bl	80014d4 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b64      	cmp	r3, #100	; 0x64
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e207      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf6:	4b5b      	ldr	r3, [pc, #364]	; (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d0f0      	beq.n	8001be4 <HAL_RCC_OscConfig+0xc0>
 8001c02:	e014      	b.n	8001c2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c04:	f7ff fc66 	bl	80014d4 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c0c:	f7ff fc62 	bl	80014d4 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b64      	cmp	r3, #100	; 0x64
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e1f3      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c1e:	4b51      	ldr	r3, [pc, #324]	; (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f0      	bne.n	8001c0c <HAL_RCC_OscConfig+0xe8>
 8001c2a:	e000      	b.n	8001c2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d063      	beq.n	8001d02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c3a:	4b4a      	ldr	r3, [pc, #296]	; (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 030c 	and.w	r3, r3, #12
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00b      	beq.n	8001c5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c46:	4b47      	ldr	r3, [pc, #284]	; (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c4e:	2b08      	cmp	r3, #8
 8001c50:	d11c      	bne.n	8001c8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c52:	4b44      	ldr	r3, [pc, #272]	; (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d116      	bne.n	8001c8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c5e:	4b41      	ldr	r3, [pc, #260]	; (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d005      	beq.n	8001c76 <HAL_RCC_OscConfig+0x152>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d001      	beq.n	8001c76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e1c7      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c76:	4b3b      	ldr	r3, [pc, #236]	; (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	4937      	ldr	r1, [pc, #220]	; (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c8a:	e03a      	b.n	8001d02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d020      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c94:	4b34      	ldr	r3, [pc, #208]	; (8001d68 <HAL_RCC_OscConfig+0x244>)
 8001c96:	2201      	movs	r2, #1
 8001c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9a:	f7ff fc1b 	bl	80014d4 <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ca2:	f7ff fc17 	bl	80014d4 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e1a8      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb4:	4b2b      	ldr	r3, [pc, #172]	; (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0f0      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc0:	4b28      	ldr	r3, [pc, #160]	; (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	4925      	ldr	r1, [pc, #148]	; (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	600b      	str	r3, [r1, #0]
 8001cd4:	e015      	b.n	8001d02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cd6:	4b24      	ldr	r3, [pc, #144]	; (8001d68 <HAL_RCC_OscConfig+0x244>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cdc:	f7ff fbfa 	bl	80014d4 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ce4:	f7ff fbf6 	bl	80014d4 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e187      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cf6:	4b1b      	ldr	r3, [pc, #108]	; (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f0      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d036      	beq.n	8001d7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d016      	beq.n	8001d44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d16:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <HAL_RCC_OscConfig+0x248>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d1c:	f7ff fbda 	bl	80014d4 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d24:	f7ff fbd6 	bl	80014d4 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e167      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d36:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001d38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCC_OscConfig+0x200>
 8001d42:	e01b      	b.n	8001d7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d44:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <HAL_RCC_OscConfig+0x248>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4a:	f7ff fbc3 	bl	80014d4 <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d50:	e00e      	b.n	8001d70 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d52:	f7ff fbbf 	bl	80014d4 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d907      	bls.n	8001d70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e150      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
 8001d64:	40023800 	.word	0x40023800
 8001d68:	42470000 	.word	0x42470000
 8001d6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d70:	4b88      	ldr	r3, [pc, #544]	; (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1ea      	bne.n	8001d52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f000 8097 	beq.w	8001eb8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d8e:	4b81      	ldr	r3, [pc, #516]	; (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d10f      	bne.n	8001dba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	4b7d      	ldr	r3, [pc, #500]	; (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	4a7c      	ldr	r2, [pc, #496]	; (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da8:	6413      	str	r3, [r2, #64]	; 0x40
 8001daa:	4b7a      	ldr	r3, [pc, #488]	; (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db2:	60bb      	str	r3, [r7, #8]
 8001db4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001db6:	2301      	movs	r3, #1
 8001db8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dba:	4b77      	ldr	r3, [pc, #476]	; (8001f98 <HAL_RCC_OscConfig+0x474>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d118      	bne.n	8001df8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dc6:	4b74      	ldr	r3, [pc, #464]	; (8001f98 <HAL_RCC_OscConfig+0x474>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a73      	ldr	r2, [pc, #460]	; (8001f98 <HAL_RCC_OscConfig+0x474>)
 8001dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dd2:	f7ff fb7f 	bl	80014d4 <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dda:	f7ff fb7b 	bl	80014d4 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e10c      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dec:	4b6a      	ldr	r3, [pc, #424]	; (8001f98 <HAL_RCC_OscConfig+0x474>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0f0      	beq.n	8001dda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d106      	bne.n	8001e0e <HAL_RCC_OscConfig+0x2ea>
 8001e00:	4b64      	ldr	r3, [pc, #400]	; (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e04:	4a63      	ldr	r2, [pc, #396]	; (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e0c:	e01c      	b.n	8001e48 <HAL_RCC_OscConfig+0x324>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	2b05      	cmp	r3, #5
 8001e14:	d10c      	bne.n	8001e30 <HAL_RCC_OscConfig+0x30c>
 8001e16:	4b5f      	ldr	r3, [pc, #380]	; (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1a:	4a5e      	ldr	r2, [pc, #376]	; (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001e1c:	f043 0304 	orr.w	r3, r3, #4
 8001e20:	6713      	str	r3, [r2, #112]	; 0x70
 8001e22:	4b5c      	ldr	r3, [pc, #368]	; (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e26:	4a5b      	ldr	r2, [pc, #364]	; (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e2e:	e00b      	b.n	8001e48 <HAL_RCC_OscConfig+0x324>
 8001e30:	4b58      	ldr	r3, [pc, #352]	; (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e34:	4a57      	ldr	r2, [pc, #348]	; (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001e36:	f023 0301 	bic.w	r3, r3, #1
 8001e3a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e3c:	4b55      	ldr	r3, [pc, #340]	; (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e40:	4a54      	ldr	r2, [pc, #336]	; (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001e42:	f023 0304 	bic.w	r3, r3, #4
 8001e46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d015      	beq.n	8001e7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e50:	f7ff fb40 	bl	80014d4 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e56:	e00a      	b.n	8001e6e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e58:	f7ff fb3c 	bl	80014d4 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e0cb      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e6e:	4b49      	ldr	r3, [pc, #292]	; (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0ee      	beq.n	8001e58 <HAL_RCC_OscConfig+0x334>
 8001e7a:	e014      	b.n	8001ea6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7c:	f7ff fb2a 	bl	80014d4 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e82:	e00a      	b.n	8001e9a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e84:	f7ff fb26 	bl	80014d4 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e0b5      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e9a:	4b3e      	ldr	r3, [pc, #248]	; (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1ee      	bne.n	8001e84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ea6:	7dfb      	ldrb	r3, [r7, #23]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d105      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eac:	4b39      	ldr	r3, [pc, #228]	; (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	4a38      	ldr	r2, [pc, #224]	; (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001eb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eb6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f000 80a1 	beq.w	8002004 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ec2:	4b34      	ldr	r3, [pc, #208]	; (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 030c 	and.w	r3, r3, #12
 8001eca:	2b08      	cmp	r3, #8
 8001ecc:	d05c      	beq.n	8001f88 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d141      	bne.n	8001f5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed6:	4b31      	ldr	r3, [pc, #196]	; (8001f9c <HAL_RCC_OscConfig+0x478>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001edc:	f7ff fafa 	bl	80014d4 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ee4:	f7ff faf6 	bl	80014d4 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e087      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ef6:	4b27      	ldr	r3, [pc, #156]	; (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f0      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69da      	ldr	r2, [r3, #28]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	019b      	lsls	r3, r3, #6
 8001f12:	431a      	orrs	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f18:	085b      	lsrs	r3, r3, #1
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	041b      	lsls	r3, r3, #16
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f24:	061b      	lsls	r3, r3, #24
 8001f26:	491b      	ldr	r1, [pc, #108]	; (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f2c:	4b1b      	ldr	r3, [pc, #108]	; (8001f9c <HAL_RCC_OscConfig+0x478>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f32:	f7ff facf 	bl	80014d4 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f3a:	f7ff facb 	bl	80014d4 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e05c      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f4c:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0f0      	beq.n	8001f3a <HAL_RCC_OscConfig+0x416>
 8001f58:	e054      	b.n	8002004 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f5a:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <HAL_RCC_OscConfig+0x478>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f60:	f7ff fab8 	bl	80014d4 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f68:	f7ff fab4 	bl	80014d4 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e045      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f7a:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f0      	bne.n	8001f68 <HAL_RCC_OscConfig+0x444>
 8001f86:	e03d      	b.n	8002004 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d107      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e038      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40007000 	.word	0x40007000
 8001f9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fa0:	4b1b      	ldr	r3, [pc, #108]	; (8002010 <HAL_RCC_OscConfig+0x4ec>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d028      	beq.n	8002000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d121      	bne.n	8002000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d11a      	bne.n	8002000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d111      	bne.n	8002000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe6:	085b      	lsrs	r3, r3, #1
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d107      	bne.n	8002000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d001      	beq.n	8002004 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e000      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3718      	adds	r7, #24
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40023800 	.word	0x40023800

08002014 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e0cc      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002028:	4b68      	ldr	r3, [pc, #416]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	429a      	cmp	r2, r3
 8002034:	d90c      	bls.n	8002050 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002036:	4b65      	ldr	r3, [pc, #404]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800203e:	4b63      	ldr	r3, [pc, #396]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	429a      	cmp	r2, r3
 800204a:	d001      	beq.n	8002050 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0b8      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d020      	beq.n	800209e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	2b00      	cmp	r3, #0
 8002066:	d005      	beq.n	8002074 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002068:	4b59      	ldr	r3, [pc, #356]	; (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	4a58      	ldr	r2, [pc, #352]	; (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 800206e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002072:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0308 	and.w	r3, r3, #8
 800207c:	2b00      	cmp	r3, #0
 800207e:	d005      	beq.n	800208c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002080:	4b53      	ldr	r3, [pc, #332]	; (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	4a52      	ldr	r2, [pc, #328]	; (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002086:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800208a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800208c:	4b50      	ldr	r3, [pc, #320]	; (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	494d      	ldr	r1, [pc, #308]	; (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 800209a:	4313      	orrs	r3, r2
 800209c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d044      	beq.n	8002134 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d107      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b2:	4b47      	ldr	r3, [pc, #284]	; (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d119      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e07f      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d003      	beq.n	80020d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ce:	2b03      	cmp	r3, #3
 80020d0:	d107      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020d2:	4b3f      	ldr	r3, [pc, #252]	; (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d109      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e06f      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e2:	4b3b      	ldr	r3, [pc, #236]	; (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e067      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020f2:	4b37      	ldr	r3, [pc, #220]	; (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f023 0203 	bic.w	r2, r3, #3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	4934      	ldr	r1, [pc, #208]	; (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002100:	4313      	orrs	r3, r2
 8002102:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002104:	f7ff f9e6 	bl	80014d4 <HAL_GetTick>
 8002108:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800210a:	e00a      	b.n	8002122 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800210c:	f7ff f9e2 	bl	80014d4 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	f241 3288 	movw	r2, #5000	; 0x1388
 800211a:	4293      	cmp	r3, r2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e04f      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002122:	4b2b      	ldr	r3, [pc, #172]	; (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 020c 	and.w	r2, r3, #12
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	429a      	cmp	r2, r3
 8002132:	d1eb      	bne.n	800210c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002134:	4b25      	ldr	r3, [pc, #148]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	429a      	cmp	r2, r3
 8002140:	d20c      	bcs.n	800215c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002142:	4b22      	ldr	r3, [pc, #136]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800214a:	4b20      	ldr	r3, [pc, #128]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	429a      	cmp	r2, r3
 8002156:	d001      	beq.n	800215c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e032      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	2b00      	cmp	r3, #0
 8002166:	d008      	beq.n	800217a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002168:	4b19      	ldr	r3, [pc, #100]	; (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	4916      	ldr	r1, [pc, #88]	; (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002176:	4313      	orrs	r3, r2
 8002178:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	2b00      	cmp	r3, #0
 8002184:	d009      	beq.n	800219a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002186:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	490e      	ldr	r1, [pc, #56]	; (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002196:	4313      	orrs	r3, r2
 8002198:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800219a:	f000 f821 	bl	80021e0 <HAL_RCC_GetSysClockFreq>
 800219e:	4602      	mov	r2, r0
 80021a0:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	091b      	lsrs	r3, r3, #4
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	490a      	ldr	r1, [pc, #40]	; (80021d4 <HAL_RCC_ClockConfig+0x1c0>)
 80021ac:	5ccb      	ldrb	r3, [r1, r3]
 80021ae:	fa22 f303 	lsr.w	r3, r2, r3
 80021b2:	4a09      	ldr	r2, [pc, #36]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 80021b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021b6:	4b09      	ldr	r3, [pc, #36]	; (80021dc <HAL_RCC_ClockConfig+0x1c8>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff f946 	bl	800144c <HAL_InitTick>

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40023c00 	.word	0x40023c00
 80021d0:	40023800 	.word	0x40023800
 80021d4:	080032b0 	.word	0x080032b0
 80021d8:	20000000 	.word	0x20000000
 80021dc:	20000004 	.word	0x20000004

080021e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021e4:	b090      	sub	sp, #64	; 0x40
 80021e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	637b      	str	r3, [r7, #52]	; 0x34
 80021ec:	2300      	movs	r3, #0
 80021ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021f0:	2300      	movs	r3, #0
 80021f2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021f8:	4b59      	ldr	r3, [pc, #356]	; (8002360 <HAL_RCC_GetSysClockFreq+0x180>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 030c 	and.w	r3, r3, #12
 8002200:	2b08      	cmp	r3, #8
 8002202:	d00d      	beq.n	8002220 <HAL_RCC_GetSysClockFreq+0x40>
 8002204:	2b08      	cmp	r3, #8
 8002206:	f200 80a1 	bhi.w	800234c <HAL_RCC_GetSysClockFreq+0x16c>
 800220a:	2b00      	cmp	r3, #0
 800220c:	d002      	beq.n	8002214 <HAL_RCC_GetSysClockFreq+0x34>
 800220e:	2b04      	cmp	r3, #4
 8002210:	d003      	beq.n	800221a <HAL_RCC_GetSysClockFreq+0x3a>
 8002212:	e09b      	b.n	800234c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002214:	4b53      	ldr	r3, [pc, #332]	; (8002364 <HAL_RCC_GetSysClockFreq+0x184>)
 8002216:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002218:	e09b      	b.n	8002352 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800221a:	4b53      	ldr	r3, [pc, #332]	; (8002368 <HAL_RCC_GetSysClockFreq+0x188>)
 800221c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800221e:	e098      	b.n	8002352 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002220:	4b4f      	ldr	r3, [pc, #316]	; (8002360 <HAL_RCC_GetSysClockFreq+0x180>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002228:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800222a:	4b4d      	ldr	r3, [pc, #308]	; (8002360 <HAL_RCC_GetSysClockFreq+0x180>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d028      	beq.n	8002288 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002236:	4b4a      	ldr	r3, [pc, #296]	; (8002360 <HAL_RCC_GetSysClockFreq+0x180>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	099b      	lsrs	r3, r3, #6
 800223c:	2200      	movs	r2, #0
 800223e:	623b      	str	r3, [r7, #32]
 8002240:	627a      	str	r2, [r7, #36]	; 0x24
 8002242:	6a3b      	ldr	r3, [r7, #32]
 8002244:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002248:	2100      	movs	r1, #0
 800224a:	4b47      	ldr	r3, [pc, #284]	; (8002368 <HAL_RCC_GetSysClockFreq+0x188>)
 800224c:	fb03 f201 	mul.w	r2, r3, r1
 8002250:	2300      	movs	r3, #0
 8002252:	fb00 f303 	mul.w	r3, r0, r3
 8002256:	4413      	add	r3, r2
 8002258:	4a43      	ldr	r2, [pc, #268]	; (8002368 <HAL_RCC_GetSysClockFreq+0x188>)
 800225a:	fba0 1202 	umull	r1, r2, r0, r2
 800225e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002260:	460a      	mov	r2, r1
 8002262:	62ba      	str	r2, [r7, #40]	; 0x28
 8002264:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002266:	4413      	add	r3, r2
 8002268:	62fb      	str	r3, [r7, #44]	; 0x2c
 800226a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800226c:	2200      	movs	r2, #0
 800226e:	61bb      	str	r3, [r7, #24]
 8002270:	61fa      	str	r2, [r7, #28]
 8002272:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002276:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800227a:	f7fe fb13 	bl	80008a4 <__aeabi_uldivmod>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	4613      	mov	r3, r2
 8002284:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002286:	e053      	b.n	8002330 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002288:	4b35      	ldr	r3, [pc, #212]	; (8002360 <HAL_RCC_GetSysClockFreq+0x180>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	099b      	lsrs	r3, r3, #6
 800228e:	2200      	movs	r2, #0
 8002290:	613b      	str	r3, [r7, #16]
 8002292:	617a      	str	r2, [r7, #20]
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800229a:	f04f 0b00 	mov.w	fp, #0
 800229e:	4652      	mov	r2, sl
 80022a0:	465b      	mov	r3, fp
 80022a2:	f04f 0000 	mov.w	r0, #0
 80022a6:	f04f 0100 	mov.w	r1, #0
 80022aa:	0159      	lsls	r1, r3, #5
 80022ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022b0:	0150      	lsls	r0, r2, #5
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	ebb2 080a 	subs.w	r8, r2, sl
 80022ba:	eb63 090b 	sbc.w	r9, r3, fp
 80022be:	f04f 0200 	mov.w	r2, #0
 80022c2:	f04f 0300 	mov.w	r3, #0
 80022c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80022ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80022ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80022d2:	ebb2 0408 	subs.w	r4, r2, r8
 80022d6:	eb63 0509 	sbc.w	r5, r3, r9
 80022da:	f04f 0200 	mov.w	r2, #0
 80022de:	f04f 0300 	mov.w	r3, #0
 80022e2:	00eb      	lsls	r3, r5, #3
 80022e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022e8:	00e2      	lsls	r2, r4, #3
 80022ea:	4614      	mov	r4, r2
 80022ec:	461d      	mov	r5, r3
 80022ee:	eb14 030a 	adds.w	r3, r4, sl
 80022f2:	603b      	str	r3, [r7, #0]
 80022f4:	eb45 030b 	adc.w	r3, r5, fp
 80022f8:	607b      	str	r3, [r7, #4]
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	f04f 0300 	mov.w	r3, #0
 8002302:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002306:	4629      	mov	r1, r5
 8002308:	028b      	lsls	r3, r1, #10
 800230a:	4621      	mov	r1, r4
 800230c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002310:	4621      	mov	r1, r4
 8002312:	028a      	lsls	r2, r1, #10
 8002314:	4610      	mov	r0, r2
 8002316:	4619      	mov	r1, r3
 8002318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800231a:	2200      	movs	r2, #0
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	60fa      	str	r2, [r7, #12]
 8002320:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002324:	f7fe fabe 	bl	80008a4 <__aeabi_uldivmod>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	4613      	mov	r3, r2
 800232e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002330:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <HAL_RCC_GetSysClockFreq+0x180>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	0c1b      	lsrs	r3, r3, #16
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	3301      	adds	r3, #1
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002340:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002344:	fbb2 f3f3 	udiv	r3, r2, r3
 8002348:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800234a:	e002      	b.n	8002352 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800234c:	4b05      	ldr	r3, [pc, #20]	; (8002364 <HAL_RCC_GetSysClockFreq+0x184>)
 800234e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002350:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002354:	4618      	mov	r0, r3
 8002356:	3740      	adds	r7, #64	; 0x40
 8002358:	46bd      	mov	sp, r7
 800235a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800235e:	bf00      	nop
 8002360:	40023800 	.word	0x40023800
 8002364:	00f42400 	.word	0x00f42400
 8002368:	017d7840 	.word	0x017d7840

0800236c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e041      	b.n	8002402 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d106      	bne.n	8002398 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7fe ff0a 	bl	80011ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2202      	movs	r2, #2
 800239c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3304      	adds	r3, #4
 80023a8:	4619      	mov	r1, r3
 80023aa:	4610      	mov	r0, r2
 80023ac:	f000 fc42 	bl	8002c34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
	...

0800240c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2b01      	cmp	r3, #1
 800241e:	d001      	beq.n	8002424 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e046      	b.n	80024b2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2202      	movs	r2, #2
 8002428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a23      	ldr	r2, [pc, #140]	; (80024c0 <HAL_TIM_Base_Start+0xb4>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d022      	beq.n	800247c <HAL_TIM_Base_Start+0x70>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800243e:	d01d      	beq.n	800247c <HAL_TIM_Base_Start+0x70>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a1f      	ldr	r2, [pc, #124]	; (80024c4 <HAL_TIM_Base_Start+0xb8>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d018      	beq.n	800247c <HAL_TIM_Base_Start+0x70>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a1e      	ldr	r2, [pc, #120]	; (80024c8 <HAL_TIM_Base_Start+0xbc>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d013      	beq.n	800247c <HAL_TIM_Base_Start+0x70>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a1c      	ldr	r2, [pc, #112]	; (80024cc <HAL_TIM_Base_Start+0xc0>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d00e      	beq.n	800247c <HAL_TIM_Base_Start+0x70>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a1b      	ldr	r2, [pc, #108]	; (80024d0 <HAL_TIM_Base_Start+0xc4>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d009      	beq.n	800247c <HAL_TIM_Base_Start+0x70>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a19      	ldr	r2, [pc, #100]	; (80024d4 <HAL_TIM_Base_Start+0xc8>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d004      	beq.n	800247c <HAL_TIM_Base_Start+0x70>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a18      	ldr	r2, [pc, #96]	; (80024d8 <HAL_TIM_Base_Start+0xcc>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d111      	bne.n	80024a0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2b06      	cmp	r3, #6
 800248c:	d010      	beq.n	80024b0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f042 0201 	orr.w	r2, r2, #1
 800249c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800249e:	e007      	b.n	80024b0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 0201 	orr.w	r2, r2, #1
 80024ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	40010000 	.word	0x40010000
 80024c4:	40000400 	.word	0x40000400
 80024c8:	40000800 	.word	0x40000800
 80024cc:	40000c00 	.word	0x40000c00
 80024d0:	40010400 	.word	0x40010400
 80024d4:	40014000 	.word	0x40014000
 80024d8:	40001800 	.word	0x40001800

080024dc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6a1a      	ldr	r2, [r3, #32]
 80024ea:	f241 1311 	movw	r3, #4369	; 0x1111
 80024ee:	4013      	ands	r3, r2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10f      	bne.n	8002514 <HAL_TIM_Base_Stop+0x38>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6a1a      	ldr	r2, [r3, #32]
 80024fa:	f240 4344 	movw	r3, #1092	; 0x444
 80024fe:	4013      	ands	r3, r2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d107      	bne.n	8002514 <HAL_TIM_Base_Stop+0x38>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0201 	bic.w	r2, r2, #1
 8002512:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
	...

0800252c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b01      	cmp	r3, #1
 800253e:	d001      	beq.n	8002544 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e04e      	b.n	80025e2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2202      	movs	r2, #2
 8002548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68da      	ldr	r2, [r3, #12]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f042 0201 	orr.w	r2, r2, #1
 800255a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a23      	ldr	r2, [pc, #140]	; (80025f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d022      	beq.n	80025ac <HAL_TIM_Base_Start_IT+0x80>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800256e:	d01d      	beq.n	80025ac <HAL_TIM_Base_Start_IT+0x80>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a1f      	ldr	r2, [pc, #124]	; (80025f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d018      	beq.n	80025ac <HAL_TIM_Base_Start_IT+0x80>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a1e      	ldr	r2, [pc, #120]	; (80025f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d013      	beq.n	80025ac <HAL_TIM_Base_Start_IT+0x80>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a1c      	ldr	r2, [pc, #112]	; (80025fc <HAL_TIM_Base_Start_IT+0xd0>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d00e      	beq.n	80025ac <HAL_TIM_Base_Start_IT+0x80>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a1b      	ldr	r2, [pc, #108]	; (8002600 <HAL_TIM_Base_Start_IT+0xd4>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d009      	beq.n	80025ac <HAL_TIM_Base_Start_IT+0x80>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a19      	ldr	r2, [pc, #100]	; (8002604 <HAL_TIM_Base_Start_IT+0xd8>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d004      	beq.n	80025ac <HAL_TIM_Base_Start_IT+0x80>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a18      	ldr	r2, [pc, #96]	; (8002608 <HAL_TIM_Base_Start_IT+0xdc>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d111      	bne.n	80025d0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2b06      	cmp	r3, #6
 80025bc:	d010      	beq.n	80025e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f042 0201 	orr.w	r2, r2, #1
 80025cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ce:	e007      	b.n	80025e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0201 	orr.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	40010000 	.word	0x40010000
 80025f4:	40000400 	.word	0x40000400
 80025f8:	40000800 	.word	0x40000800
 80025fc:	40000c00 	.word	0x40000c00
 8002600:	40010400 	.word	0x40010400
 8002604:	40014000 	.word	0x40014000
 8002608:	40001800 	.word	0x40001800

0800260c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e041      	b.n	80026a2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d106      	bne.n	8002638 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f839 	bl	80026aa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2202      	movs	r2, #2
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3304      	adds	r3, #4
 8002648:	4619      	mov	r1, r3
 800264a:	4610      	mov	r0, r2
 800264c:	f000 faf2 	bl	8002c34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
	...

080026c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d109      	bne.n	80026e4 <HAL_TIM_PWM_Start+0x24>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b01      	cmp	r3, #1
 80026da:	bf14      	ite	ne
 80026dc:	2301      	movne	r3, #1
 80026de:	2300      	moveq	r3, #0
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	e022      	b.n	800272a <HAL_TIM_PWM_Start+0x6a>
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	d109      	bne.n	80026fe <HAL_TIM_PWM_Start+0x3e>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	bf14      	ite	ne
 80026f6:	2301      	movne	r3, #1
 80026f8:	2300      	moveq	r3, #0
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	e015      	b.n	800272a <HAL_TIM_PWM_Start+0x6a>
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	2b08      	cmp	r3, #8
 8002702:	d109      	bne.n	8002718 <HAL_TIM_PWM_Start+0x58>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b01      	cmp	r3, #1
 800270e:	bf14      	ite	ne
 8002710:	2301      	movne	r3, #1
 8002712:	2300      	moveq	r3, #0
 8002714:	b2db      	uxtb	r3, r3
 8002716:	e008      	b.n	800272a <HAL_TIM_PWM_Start+0x6a>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b01      	cmp	r3, #1
 8002722:	bf14      	ite	ne
 8002724:	2301      	movne	r3, #1
 8002726:	2300      	moveq	r3, #0
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e07c      	b.n	800282c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d104      	bne.n	8002742 <HAL_TIM_PWM_Start+0x82>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2202      	movs	r2, #2
 800273c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002740:	e013      	b.n	800276a <HAL_TIM_PWM_Start+0xaa>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	2b04      	cmp	r3, #4
 8002746:	d104      	bne.n	8002752 <HAL_TIM_PWM_Start+0x92>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2202      	movs	r2, #2
 800274c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002750:	e00b      	b.n	800276a <HAL_TIM_PWM_Start+0xaa>
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	2b08      	cmp	r3, #8
 8002756:	d104      	bne.n	8002762 <HAL_TIM_PWM_Start+0xa2>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2202      	movs	r2, #2
 800275c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002760:	e003      	b.n	800276a <HAL_TIM_PWM_Start+0xaa>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2202      	movs	r2, #2
 8002766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2201      	movs	r2, #1
 8002770:	6839      	ldr	r1, [r7, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f000 fcae 	bl	80030d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a2d      	ldr	r2, [pc, #180]	; (8002834 <HAL_TIM_PWM_Start+0x174>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d004      	beq.n	800278c <HAL_TIM_PWM_Start+0xcc>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a2c      	ldr	r2, [pc, #176]	; (8002838 <HAL_TIM_PWM_Start+0x178>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d101      	bne.n	8002790 <HAL_TIM_PWM_Start+0xd0>
 800278c:	2301      	movs	r3, #1
 800278e:	e000      	b.n	8002792 <HAL_TIM_PWM_Start+0xd2>
 8002790:	2300      	movs	r3, #0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d007      	beq.n	80027a6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a22      	ldr	r2, [pc, #136]	; (8002834 <HAL_TIM_PWM_Start+0x174>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d022      	beq.n	80027f6 <HAL_TIM_PWM_Start+0x136>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027b8:	d01d      	beq.n	80027f6 <HAL_TIM_PWM_Start+0x136>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a1f      	ldr	r2, [pc, #124]	; (800283c <HAL_TIM_PWM_Start+0x17c>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d018      	beq.n	80027f6 <HAL_TIM_PWM_Start+0x136>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a1d      	ldr	r2, [pc, #116]	; (8002840 <HAL_TIM_PWM_Start+0x180>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d013      	beq.n	80027f6 <HAL_TIM_PWM_Start+0x136>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a1c      	ldr	r2, [pc, #112]	; (8002844 <HAL_TIM_PWM_Start+0x184>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d00e      	beq.n	80027f6 <HAL_TIM_PWM_Start+0x136>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a16      	ldr	r2, [pc, #88]	; (8002838 <HAL_TIM_PWM_Start+0x178>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d009      	beq.n	80027f6 <HAL_TIM_PWM_Start+0x136>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a18      	ldr	r2, [pc, #96]	; (8002848 <HAL_TIM_PWM_Start+0x188>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d004      	beq.n	80027f6 <HAL_TIM_PWM_Start+0x136>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a16      	ldr	r2, [pc, #88]	; (800284c <HAL_TIM_PWM_Start+0x18c>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d111      	bne.n	800281a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2b06      	cmp	r3, #6
 8002806:	d010      	beq.n	800282a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f042 0201 	orr.w	r2, r2, #1
 8002816:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002818:	e007      	b.n	800282a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f042 0201 	orr.w	r2, r2, #1
 8002828:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40010000 	.word	0x40010000
 8002838:	40010400 	.word	0x40010400
 800283c:	40000400 	.word	0x40000400
 8002840:	40000800 	.word	0x40000800
 8002844:	40000c00 	.word	0x40000c00
 8002848:	40014000 	.word	0x40014000
 800284c:	40001800 	.word	0x40001800

08002850 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b02      	cmp	r3, #2
 8002864:	d122      	bne.n	80028ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b02      	cmp	r3, #2
 8002872:	d11b      	bne.n	80028ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f06f 0202 	mvn.w	r2, #2
 800287c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f9b0 	bl	8002bf8 <HAL_TIM_IC_CaptureCallback>
 8002898:	e005      	b.n	80028a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f9a2 	bl	8002be4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 f9b3 	bl	8002c0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	f003 0304 	and.w	r3, r3, #4
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d122      	bne.n	8002900 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d11b      	bne.n	8002900 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f06f 0204 	mvn.w	r2, #4
 80028d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2202      	movs	r2, #2
 80028d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 f986 	bl	8002bf8 <HAL_TIM_IC_CaptureCallback>
 80028ec:	e005      	b.n	80028fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f978 	bl	8002be4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 f989 	bl	8002c0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	2b08      	cmp	r3, #8
 800290c:	d122      	bne.n	8002954 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	f003 0308 	and.w	r3, r3, #8
 8002918:	2b08      	cmp	r3, #8
 800291a:	d11b      	bne.n	8002954 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f06f 0208 	mvn.w	r2, #8
 8002924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2204      	movs	r2, #4
 800292a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	f003 0303 	and.w	r3, r3, #3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f95c 	bl	8002bf8 <HAL_TIM_IC_CaptureCallback>
 8002940:	e005      	b.n	800294e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f94e 	bl	8002be4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f95f 	bl	8002c0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	f003 0310 	and.w	r3, r3, #16
 800295e:	2b10      	cmp	r3, #16
 8002960:	d122      	bne.n	80029a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	f003 0310 	and.w	r3, r3, #16
 800296c:	2b10      	cmp	r3, #16
 800296e:	d11b      	bne.n	80029a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f06f 0210 	mvn.w	r2, #16
 8002978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2208      	movs	r2, #8
 800297e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f932 	bl	8002bf8 <HAL_TIM_IC_CaptureCallback>
 8002994:	e005      	b.n	80029a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f924 	bl	8002be4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 f935 	bl	8002c0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d10e      	bne.n	80029d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d107      	bne.n	80029d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f06f 0201 	mvn.w	r2, #1
 80029cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f7fe fb8c 	bl	80010ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029de:	2b80      	cmp	r3, #128	; 0x80
 80029e0:	d10e      	bne.n	8002a00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ec:	2b80      	cmp	r3, #128	; 0x80
 80029ee:	d107      	bne.n	8002a00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 fc16 	bl	800322c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0a:	2b40      	cmp	r3, #64	; 0x40
 8002a0c:	d10e      	bne.n	8002a2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a18:	2b40      	cmp	r3, #64	; 0x40
 8002a1a:	d107      	bne.n	8002a2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 f8fa 	bl	8002c20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	f003 0320 	and.w	r3, r3, #32
 8002a36:	2b20      	cmp	r3, #32
 8002a38:	d10e      	bne.n	8002a58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	f003 0320 	and.w	r3, r3, #32
 8002a44:	2b20      	cmp	r3, #32
 8002a46:	d107      	bne.n	8002a58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f06f 0220 	mvn.w	r2, #32
 8002a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 fbe0 	bl	8003218 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a58:	bf00      	nop
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d101      	bne.n	8002a7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	e0ae      	b.n	8002bdc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b0c      	cmp	r3, #12
 8002a8a:	f200 809f 	bhi.w	8002bcc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002a8e:	a201      	add	r2, pc, #4	; (adr r2, 8002a94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a94:	08002ac9 	.word	0x08002ac9
 8002a98:	08002bcd 	.word	0x08002bcd
 8002a9c:	08002bcd 	.word	0x08002bcd
 8002aa0:	08002bcd 	.word	0x08002bcd
 8002aa4:	08002b09 	.word	0x08002b09
 8002aa8:	08002bcd 	.word	0x08002bcd
 8002aac:	08002bcd 	.word	0x08002bcd
 8002ab0:	08002bcd 	.word	0x08002bcd
 8002ab4:	08002b4b 	.word	0x08002b4b
 8002ab8:	08002bcd 	.word	0x08002bcd
 8002abc:	08002bcd 	.word	0x08002bcd
 8002ac0:	08002bcd 	.word	0x08002bcd
 8002ac4:	08002b8b 	.word	0x08002b8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68b9      	ldr	r1, [r7, #8]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 f950 	bl	8002d74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	699a      	ldr	r2, [r3, #24]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f042 0208 	orr.w	r2, r2, #8
 8002ae2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	699a      	ldr	r2, [r3, #24]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 0204 	bic.w	r2, r2, #4
 8002af2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6999      	ldr	r1, [r3, #24]
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	691a      	ldr	r2, [r3, #16]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	619a      	str	r2, [r3, #24]
      break;
 8002b06:	e064      	b.n	8002bd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68b9      	ldr	r1, [r7, #8]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 f9a0 	bl	8002e54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	699a      	ldr	r2, [r3, #24]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699a      	ldr	r2, [r3, #24]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6999      	ldr	r1, [r3, #24]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	021a      	lsls	r2, r3, #8
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	619a      	str	r2, [r3, #24]
      break;
 8002b48:	e043      	b.n	8002bd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68b9      	ldr	r1, [r7, #8]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f000 f9f5 	bl	8002f40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	69da      	ldr	r2, [r3, #28]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f042 0208 	orr.w	r2, r2, #8
 8002b64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	69da      	ldr	r2, [r3, #28]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 0204 	bic.w	r2, r2, #4
 8002b74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	69d9      	ldr	r1, [r3, #28]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	691a      	ldr	r2, [r3, #16]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	61da      	str	r2, [r3, #28]
      break;
 8002b88:	e023      	b.n	8002bd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68b9      	ldr	r1, [r7, #8]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 fa49 	bl	8003028 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	69da      	ldr	r2, [r3, #28]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ba4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	69da      	ldr	r2, [r3, #28]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	69d9      	ldr	r1, [r3, #28]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	021a      	lsls	r2, r3, #8
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	61da      	str	r2, [r3, #28]
      break;
 8002bca:	e002      	b.n	8002bd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	75fb      	strb	r3, [r7, #23]
      break;
 8002bd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a40      	ldr	r2, [pc, #256]	; (8002d48 <TIM_Base_SetConfig+0x114>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d013      	beq.n	8002c74 <TIM_Base_SetConfig+0x40>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c52:	d00f      	beq.n	8002c74 <TIM_Base_SetConfig+0x40>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a3d      	ldr	r2, [pc, #244]	; (8002d4c <TIM_Base_SetConfig+0x118>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d00b      	beq.n	8002c74 <TIM_Base_SetConfig+0x40>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a3c      	ldr	r2, [pc, #240]	; (8002d50 <TIM_Base_SetConfig+0x11c>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d007      	beq.n	8002c74 <TIM_Base_SetConfig+0x40>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a3b      	ldr	r2, [pc, #236]	; (8002d54 <TIM_Base_SetConfig+0x120>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d003      	beq.n	8002c74 <TIM_Base_SetConfig+0x40>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a3a      	ldr	r2, [pc, #232]	; (8002d58 <TIM_Base_SetConfig+0x124>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d108      	bne.n	8002c86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a2f      	ldr	r2, [pc, #188]	; (8002d48 <TIM_Base_SetConfig+0x114>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d02b      	beq.n	8002ce6 <TIM_Base_SetConfig+0xb2>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c94:	d027      	beq.n	8002ce6 <TIM_Base_SetConfig+0xb2>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a2c      	ldr	r2, [pc, #176]	; (8002d4c <TIM_Base_SetConfig+0x118>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d023      	beq.n	8002ce6 <TIM_Base_SetConfig+0xb2>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a2b      	ldr	r2, [pc, #172]	; (8002d50 <TIM_Base_SetConfig+0x11c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d01f      	beq.n	8002ce6 <TIM_Base_SetConfig+0xb2>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a2a      	ldr	r2, [pc, #168]	; (8002d54 <TIM_Base_SetConfig+0x120>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d01b      	beq.n	8002ce6 <TIM_Base_SetConfig+0xb2>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a29      	ldr	r2, [pc, #164]	; (8002d58 <TIM_Base_SetConfig+0x124>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d017      	beq.n	8002ce6 <TIM_Base_SetConfig+0xb2>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a28      	ldr	r2, [pc, #160]	; (8002d5c <TIM_Base_SetConfig+0x128>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d013      	beq.n	8002ce6 <TIM_Base_SetConfig+0xb2>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a27      	ldr	r2, [pc, #156]	; (8002d60 <TIM_Base_SetConfig+0x12c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d00f      	beq.n	8002ce6 <TIM_Base_SetConfig+0xb2>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a26      	ldr	r2, [pc, #152]	; (8002d64 <TIM_Base_SetConfig+0x130>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d00b      	beq.n	8002ce6 <TIM_Base_SetConfig+0xb2>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a25      	ldr	r2, [pc, #148]	; (8002d68 <TIM_Base_SetConfig+0x134>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d007      	beq.n	8002ce6 <TIM_Base_SetConfig+0xb2>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a24      	ldr	r2, [pc, #144]	; (8002d6c <TIM_Base_SetConfig+0x138>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d003      	beq.n	8002ce6 <TIM_Base_SetConfig+0xb2>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a23      	ldr	r2, [pc, #140]	; (8002d70 <TIM_Base_SetConfig+0x13c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d108      	bne.n	8002cf8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a0a      	ldr	r2, [pc, #40]	; (8002d48 <TIM_Base_SetConfig+0x114>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d003      	beq.n	8002d2c <TIM_Base_SetConfig+0xf8>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a0c      	ldr	r2, [pc, #48]	; (8002d58 <TIM_Base_SetConfig+0x124>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d103      	bne.n	8002d34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	691a      	ldr	r2, [r3, #16]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	615a      	str	r2, [r3, #20]
}
 8002d3a:	bf00      	nop
 8002d3c:	3714      	adds	r7, #20
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	40010000 	.word	0x40010000
 8002d4c:	40000400 	.word	0x40000400
 8002d50:	40000800 	.word	0x40000800
 8002d54:	40000c00 	.word	0x40000c00
 8002d58:	40010400 	.word	0x40010400
 8002d5c:	40014000 	.word	0x40014000
 8002d60:	40014400 	.word	0x40014400
 8002d64:	40014800 	.word	0x40014800
 8002d68:	40001800 	.word	0x40001800
 8002d6c:	40001c00 	.word	0x40001c00
 8002d70:	40002000 	.word	0x40002000

08002d74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b087      	sub	sp, #28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	f023 0201 	bic.w	r2, r3, #1
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f023 0303 	bic.w	r3, r3, #3
 8002daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	f023 0302 	bic.w	r3, r3, #2
 8002dbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a20      	ldr	r2, [pc, #128]	; (8002e4c <TIM_OC1_SetConfig+0xd8>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d003      	beq.n	8002dd8 <TIM_OC1_SetConfig+0x64>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a1f      	ldr	r2, [pc, #124]	; (8002e50 <TIM_OC1_SetConfig+0xdc>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d10c      	bne.n	8002df2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	f023 0308 	bic.w	r3, r3, #8
 8002dde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f023 0304 	bic.w	r3, r3, #4
 8002df0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a15      	ldr	r2, [pc, #84]	; (8002e4c <TIM_OC1_SetConfig+0xd8>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d003      	beq.n	8002e02 <TIM_OC1_SetConfig+0x8e>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a14      	ldr	r2, [pc, #80]	; (8002e50 <TIM_OC1_SetConfig+0xdc>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d111      	bne.n	8002e26 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	621a      	str	r2, [r3, #32]
}
 8002e40:	bf00      	nop
 8002e42:	371c      	adds	r7, #28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	40010000 	.word	0x40010000
 8002e50:	40010400 	.word	0x40010400

08002e54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b087      	sub	sp, #28
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	f023 0210 	bic.w	r2, r3, #16
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	021b      	lsls	r3, r3, #8
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	f023 0320 	bic.w	r3, r3, #32
 8002e9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a22      	ldr	r2, [pc, #136]	; (8002f38 <TIM_OC2_SetConfig+0xe4>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d003      	beq.n	8002ebc <TIM_OC2_SetConfig+0x68>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a21      	ldr	r2, [pc, #132]	; (8002f3c <TIM_OC2_SetConfig+0xe8>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d10d      	bne.n	8002ed8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ec2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	011b      	lsls	r3, r3, #4
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ed6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a17      	ldr	r2, [pc, #92]	; (8002f38 <TIM_OC2_SetConfig+0xe4>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d003      	beq.n	8002ee8 <TIM_OC2_SetConfig+0x94>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a16      	ldr	r2, [pc, #88]	; (8002f3c <TIM_OC2_SetConfig+0xe8>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d113      	bne.n	8002f10 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002eee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	621a      	str	r2, [r3, #32]
}
 8002f2a:	bf00      	nop
 8002f2c:	371c      	adds	r7, #28
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	40010000 	.word	0x40010000
 8002f3c:	40010400 	.word	0x40010400

08002f40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b087      	sub	sp, #28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f023 0303 	bic.w	r3, r3, #3
 8002f76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	021b      	lsls	r3, r3, #8
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a21      	ldr	r2, [pc, #132]	; (8003020 <TIM_OC3_SetConfig+0xe0>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d003      	beq.n	8002fa6 <TIM_OC3_SetConfig+0x66>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a20      	ldr	r2, [pc, #128]	; (8003024 <TIM_OC3_SetConfig+0xe4>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d10d      	bne.n	8002fc2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	021b      	lsls	r3, r3, #8
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a16      	ldr	r2, [pc, #88]	; (8003020 <TIM_OC3_SetConfig+0xe0>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d003      	beq.n	8002fd2 <TIM_OC3_SetConfig+0x92>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a15      	ldr	r2, [pc, #84]	; (8003024 <TIM_OC3_SetConfig+0xe4>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d113      	bne.n	8002ffa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	011b      	lsls	r3, r3, #4
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	621a      	str	r2, [r3, #32]
}
 8003014:	bf00      	nop
 8003016:	371c      	adds	r7, #28
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	40010000 	.word	0x40010000
 8003024:	40010400 	.word	0x40010400

08003028 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003028:	b480      	push	{r7}
 800302a:	b087      	sub	sp, #28
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800305e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	021b      	lsls	r3, r3, #8
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	4313      	orrs	r3, r2
 800306a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003072:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	031b      	lsls	r3, r3, #12
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	4313      	orrs	r3, r2
 800307e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a12      	ldr	r2, [pc, #72]	; (80030cc <TIM_OC4_SetConfig+0xa4>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d003      	beq.n	8003090 <TIM_OC4_SetConfig+0x68>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a11      	ldr	r2, [pc, #68]	; (80030d0 <TIM_OC4_SetConfig+0xa8>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d109      	bne.n	80030a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003096:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	019b      	lsls	r3, r3, #6
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	621a      	str	r2, [r3, #32]
}
 80030be:	bf00      	nop
 80030c0:	371c      	adds	r7, #28
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40010000 	.word	0x40010000
 80030d0:	40010400 	.word	0x40010400

080030d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	f003 031f 	and.w	r3, r3, #31
 80030e6:	2201      	movs	r2, #1
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6a1a      	ldr	r2, [r3, #32]
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	43db      	mvns	r3, r3
 80030f6:	401a      	ands	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6a1a      	ldr	r2, [r3, #32]
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	f003 031f 	and.w	r3, r3, #31
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	fa01 f303 	lsl.w	r3, r1, r3
 800310c:	431a      	orrs	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	621a      	str	r2, [r3, #32]
}
 8003112:	bf00      	nop
 8003114:	371c      	adds	r7, #28
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
	...

08003120 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003130:	2b01      	cmp	r3, #1
 8003132:	d101      	bne.n	8003138 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003134:	2302      	movs	r3, #2
 8003136:	e05a      	b.n	80031ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2202      	movs	r2, #2
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800315e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	4313      	orrs	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a21      	ldr	r2, [pc, #132]	; (80031fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d022      	beq.n	80031c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003184:	d01d      	beq.n	80031c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a1d      	ldr	r2, [pc, #116]	; (8003200 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d018      	beq.n	80031c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a1b      	ldr	r2, [pc, #108]	; (8003204 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d013      	beq.n	80031c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a1a      	ldr	r2, [pc, #104]	; (8003208 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d00e      	beq.n	80031c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a18      	ldr	r2, [pc, #96]	; (800320c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d009      	beq.n	80031c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a17      	ldr	r2, [pc, #92]	; (8003210 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d004      	beq.n	80031c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a15      	ldr	r2, [pc, #84]	; (8003214 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d10c      	bne.n	80031dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68ba      	ldr	r2, [r7, #8]
 80031da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	40010000 	.word	0x40010000
 8003200:	40000400 	.word	0x40000400
 8003204:	40000800 	.word	0x40000800
 8003208:	40000c00 	.word	0x40000c00
 800320c:	40010400 	.word	0x40010400
 8003210:	40014000 	.word	0x40014000
 8003214:	40001800 	.word	0x40001800

08003218 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <__libc_init_array>:
 8003240:	b570      	push	{r4, r5, r6, lr}
 8003242:	4d0d      	ldr	r5, [pc, #52]	; (8003278 <__libc_init_array+0x38>)
 8003244:	4c0d      	ldr	r4, [pc, #52]	; (800327c <__libc_init_array+0x3c>)
 8003246:	1b64      	subs	r4, r4, r5
 8003248:	10a4      	asrs	r4, r4, #2
 800324a:	2600      	movs	r6, #0
 800324c:	42a6      	cmp	r6, r4
 800324e:	d109      	bne.n	8003264 <__libc_init_array+0x24>
 8003250:	4d0b      	ldr	r5, [pc, #44]	; (8003280 <__libc_init_array+0x40>)
 8003252:	4c0c      	ldr	r4, [pc, #48]	; (8003284 <__libc_init_array+0x44>)
 8003254:	f000 f820 	bl	8003298 <_init>
 8003258:	1b64      	subs	r4, r4, r5
 800325a:	10a4      	asrs	r4, r4, #2
 800325c:	2600      	movs	r6, #0
 800325e:	42a6      	cmp	r6, r4
 8003260:	d105      	bne.n	800326e <__libc_init_array+0x2e>
 8003262:	bd70      	pop	{r4, r5, r6, pc}
 8003264:	f855 3b04 	ldr.w	r3, [r5], #4
 8003268:	4798      	blx	r3
 800326a:	3601      	adds	r6, #1
 800326c:	e7ee      	b.n	800324c <__libc_init_array+0xc>
 800326e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003272:	4798      	blx	r3
 8003274:	3601      	adds	r6, #1
 8003276:	e7f2      	b.n	800325e <__libc_init_array+0x1e>
 8003278:	080032c8 	.word	0x080032c8
 800327c:	080032c8 	.word	0x080032c8
 8003280:	080032c8 	.word	0x080032c8
 8003284:	080032cc 	.word	0x080032cc

08003288 <memset>:
 8003288:	4402      	add	r2, r0
 800328a:	4603      	mov	r3, r0
 800328c:	4293      	cmp	r3, r2
 800328e:	d100      	bne.n	8003292 <memset+0xa>
 8003290:	4770      	bx	lr
 8003292:	f803 1b01 	strb.w	r1, [r3], #1
 8003296:	e7f9      	b.n	800328c <memset+0x4>

08003298 <_init>:
 8003298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800329a:	bf00      	nop
 800329c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800329e:	bc08      	pop	{r3}
 80032a0:	469e      	mov	lr, r3
 80032a2:	4770      	bx	lr

080032a4 <_fini>:
 80032a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032a6:	bf00      	nop
 80032a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032aa:	bc08      	pop	{r3}
 80032ac:	469e      	mov	lr, r3
 80032ae:	4770      	bx	lr
